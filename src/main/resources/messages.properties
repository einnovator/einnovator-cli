
cli.descr=\
Welcome to the EInnovator CLI (Command-Line Tool).\n\
Your super-duper CLI tool for Multi-Cluster/Multi-Cloud Kubernetes devops and micro-services development.

cli.service.descr=\
Type a name to get help on commands for that service:

## Global

global.options=i,e,E
global.options.i=Run in interactive mode
global.options.e=Execute script command
global.options.E=Execute script file


global.ls.args = q+
global.ls.args.q = Optional query string (same as option -q)
global.ls.options = q,$global.get.options
global.get.options = o,O
global.get.args = id
global.get.args.id = identifier (id | uuid)
global.options.o = Output format (o = wide | yaml | json | raw)
global.options.q = Query string (matches name substring)
global.options.O = Named field set or comma-separated list of fields
global.set.options.o = Show current setting after operation

global.create.options = $global.get.options
global.update.options = $global.get.options
global.delete.options = $global.get.options

global.track = Track progress


## Generic

generic=Generic commands:

generic.ls = List Resources
generic.cd = Change current default/parent resource
generic.pwd = Show current default/parent resources

generic.set = Set environment variable
generic.set.args = var,value
generic.set.args.var = Name of the variable
generic.set.args.value = Value of the variable
generic.set.descr =\
Variable value can be expanded with syntax ${name}

generic.echo = Echo expression list
generic.echo.args = expr++
generic.echo.args.expr = literal string or expression

generic.version = Show CLI version

generic.exit = Exit interactive mode

generic.help = Show this help


## Devops Generic

devops.options.pwd = Execute pwd after

devops.ls = List resources
devops.ls.descr = List Spaces (| Domain | Registry | Vcs) based on flags. Defaults to list Spaces.
devops.ls.options = n,c,d,r|reg,vcs|git,$global.ls.options
devops.ls.options.n = List Spaces
devops.ls.options.c = List Clusters
devops.ls.options.d = List Domains
devops.ls.options.r = List Registries
devops.ls.options.vcs = List Git Vcs
devops.ls.args.q = $global.ls.args.q
devops.ls.options.o = $global.options.o
devops.ls.options.O = $global.options.O

devops.ps = List Deployments (or Jobs or CronJobs) 
devops.ps.options = d,j,c,a,r
devops.ps.options.d = List Deployments
devops.ps.options.j = List Jobs
devops.ps.options.c = List CronJobs
devops.ps.options.a = List All (Deployment, Jobs, and CronJobs)
devops.ps.options.r = List only Deployments with status Running, and CronsJobs with status running/non-suspended

devops.kill = Stop or delete Deployment (or Job or CronJob)  
devops.kill.args = deployId
devops.kill.args.deployId = Identifier of Deployment/Job/CronJob (name | id | uuid)
devops.kill.options = j,c,f|rm|del,$global.ls.options
devops.kill.options.j = Kill Job
devops.kill.options.c = Kill CronJob
devops.kill.options.f = Delete on Cloud Manager and cluster.
devops.kill.options.n = $devops.space.idx
devops.kill.options.o = $global.options.o
devops.kill.options.O = $global.options.O
devops.kill.descr = \
By default delete Deployment in cluster only, and sets status to STOPPED.\n\
With option -f | --rm | --del it also deletes in Cloud Manager.\n\
Get Deployment after stop or list Deployments in same Space after delete, if output options -o|-O are specified.\n\
To stop/delete a Job use option -j; to stop/delete a CronJob use options -c.


devops.run = Create and run Deployment (or Job or CronJob)
devops.run.args = deployId
devops.run.args.deployId = Identifier of Deployment/Job/CronJob (name | id | uuid)
devops.run.options = j,c,image,ports|port,env,mounts|mount,r|host,d|domain,props++,track,$devops.namespaced.get.options
devops.run.options2 = j,c,image,ports|port,env,mounts|mount,props++,track,$devops.namespaced.get.options
devops.run.options.j = Create and run Job
devops.run.options.c = Create and run CronJob
devops.run.options.image = Docker image to use
devops.run.options.ports = Service Ports (e.g. --ports=port:target[,...])
devops.run.options.env = Environment Variables (e.g. --env=var1=value,var2=^confimap.key,var3=^^secret.key)
devops.run.options.mounts = Volume/ConfigMap/Secret Mounts (e.g. name1:/path1=1Gi,name2:/path2=^configmap.key[+key...],name3:/path3=^^secret.key[+key])
devops.run.options.r = $devops.deployment.create.options.r
devops.run.options.d = $devops.deployment.create.options.d
devops.run.options.props = Deployment/Job/CronJob properties
devops.run.options.n = $devops.space.idx
devops.run.options.track = $global.track
devops.run.options.o = $global.options.o
devops.run.options.O = $global.options.O
devops.run.descr0 =\
Set environment variables with option --env and key=value[,...] pairs.\n\
Set mounts with option --mount with value name:/mountPath=size for volume mounts (size defaults to 1Gi).\n\
Use mount syntax ^configmap.key[+key...] for ConfigMap mounts.\n\
Use mount syntax ^^secret.key[+key...] for Secret mounts.\n\
Get/show after operation, if output options -o|-O are specified.
devops.run.descr =\
To create and run a Job use options -j.\n\
To create and schedule a CronJob use option -c.\n\
Define service ports with options --ports=port:targetPort[,...].\n\
$devops.run.descr0

devops.cd = Change current Space (and Cluster)
devops.cd.args= spaceId
devops.cd.args.spaceId= $devops.space.id
devops.cd.options = w
devops.cd.options.w = $generic.pwd
devops.cd.descr =\
If argument as format cluster/space changes cluster and space.\n\
If argument as format cluster/ changes cluster.\n\
If argument has format space change to space in current cluster.\n

devops.pwd = Show current default/parent resources
devops.pwd.descr = Show current resources: Cluster, Space, Domain, Registry, Catalog


#####################
## Cloud Manager Devops

devops = Cloud Manager Devops operations


## Cluster
devops.cluster = Cluster operations
devops.cluster.id = Identifier of Cluster (name | id | uuid)
devops.cluster.idx = Identifier of Cluster (name | id | uuid). Defaults to current Cluster, if not specified.
devops.cluster.name = Name of the Cluster

devops.cluster.ls = List Clusters
devops.cluster.ls.args = $global.ls.args
devops.cluster.ls.args.q = $global.ls.args.q
devops.cluster.ls.options = q,provider,region,props++,$global.ls.options
devops.cluster.ls.options.q = $global.options.q
devops.cluster.ls.options.provider = Provider
devops.cluster.ls.options.region = Region
devops.cluster.ls.options.props = any property of ClusterFilter (cluster schema -f)
devops.cluster.ls.options.o = $global.options.o
devops.cluster.ls.options.O = $global.options.O

devops.cluster.get = Get Details of Cluster
devops.cluster.get.options = props++,$global.get.options
devops.cluster.get.args = clusterId
devops.cluster.get.args.clusterId = $devops.cluster.id
devops.cluster.get.options.props = any property of ClusterOptions (cluster schema -g)
devops.cluster.get.options = $global.get.options
devops.cluster.get.options.o = $global.options.o
devops.cluster.get.options.O = $global.options.O

devops.cluster.view = View Cluster dashboard in web browser
devops.cluster.view.args = clusterId+
devops.cluster.view.args.clusterId = $devops.cluster.id
devops.cluster.view.descr =\
If clusterId is not specified, defaults to current Cluster if any.\n\
Requires environment where a default web-browser is configured and can be started/open.\n\
You need to login via the web-browser the first time to start a web session in Cloud Manager.

devops.cluster.create = Create/Import Cluster
devops.cluster.create.args = name+
devops.cluster.create.args.name = $devops.cluster.name
devops.cluster.create.options.props = any property of Cluster (cluster schema)
devops.cluster.create.options = f,props++,$global.create.options
devops.cluster.create.options.f = kubeconfig file to import details (e.g. ~/.kube/config)
devops.cluster.create.options.props = Cluster properties (cluster schema)
devops.cluster.create.options.o = $global.options.o
devops.cluster.create.options.O = $global.options.O
devops.cluster.create.descr=\
Create/Import Cluster with given id.\n\
If a kubeconfig file is available for the cluster, use option `-f`.\n\
Get/Show Cluster after create, if output options -o|-O are specified.

devops.cluster.update = Update Cluster
devops.cluster.update.args = clusterId
devops.cluster.update.args.clusterId = $devops.cluster.id
devops.cluster.update.options.props = any property of Cluster (cluster schema)
devops.cluster.update.options = $devops.cluster.create.options
devops.cluster.update.options.f = kubeconfig file to import details (e.g. ~/.kube/config)
devops.cluster.update.options.o = $global.options.o
devops.cluster.update.options.O = $global.options.O
devops.cluster.update.descr=\
Update Cluster with specified id.\n\
Get/Show Cluster after update, if output options -o|-O are specified.

devops.cluster.delete = Delete Cluster
devops.cluster.delete.args = clusterId
devops.cluster.delete.args.clusterId = $devops.cluster.id
devops.cluster.delete.options = $general.delete.options
devops.cluster.delete.options.o = $global.options.o
devops.cluster.delete.options.O = $global.options.O
devops.cluster.delete.descr = \
Delete Cluster with specified id.\n\
List Clusters after delete, if output options -o|-O are specified.

devops.cluster.set = Set current Cluster
devops.cluster.set.args = clusterId
devops.cluster.set.args.clusterId = $devops.cluster.id
devops.cluster.set.options = o
devops.cluster.set.options.o = $devops.options.pwd
devops.cluster.set.descr =\
Set current Cluster.\n\
Used as default for resolving Space names without prefix cluster/.

devops.cluster.unset = Unset current Cluster
devops.cluster.unset.descr =\
Unsets current Cluster.\n\
Spaces need to be qualified with prefix cluster/.

devops.cluster.schema = Show attributes/properties of Cluster
devops.cluster.schema.options = f,g
devops.cluster.schema.options.f = Show attributes/properties of ClusterFilter
devops.cluster.schema.options.g = Show attributes/properties of ClusterOptions

devops.cluster.help = Show help on commands for Clusters

## Space

devops.space = Space operations
devops.space.id = Identifier of Space (cluster/name | name | id | uuid)
devops.space.idx = Identifier of Space (cluster/name | name | id | uuid). Defaults to current Space.

devops.space.ls = List Spaces
devops.space.ls.args = $global.ls.args
devops.space.ls.args.q = $global.ls.args.q
devops.space.ls.options = q,provider,region,props++,$global.ls.options
devops.space.ls.options.q = $global.options.q
devops.space.ls.options.provider = Provider
devops.space.ls.options.region = Region
devops.space.ls.options.props = any property of SpaceFilter (space schema -f)
devops.space.ls.options.o = $global.options.o
devops.space.ls.options.O = $global.options.O

devops.space.get = Get Details of Space
devops.space.get.options = props++,$global.get.options
devops.space.get.args = spaceId
devops.space.get.args.spaceId = $devops.space.id
devops.space.get.options = $global.get.options
devops.space.get.options.props = any property of SpaceOptions (space schema -g)
devops.space.get.options.o = $global.options.o
devops.space.get.options.O = $global.options.O

devops.space.view = View Space dashboard in web browser
devops.space.view.args = spaceId+
devops.space.view.args.spaceId = $devops.space.id
devops.space.view.descr =\
If spaceId is not specified, defaults to current Space if any.\n\
Requires environment where a default web-browser is configured and can be started/open.\n\
You need to login via the web-browser the first time to start a web session in Cloud Manager.

devops.space.create = Create Space
devops.space.create.args = name
devops.space.create.args.name = $devops.space.name
devops.space.create.options.props = Space properties (space schema)
devops.space.create.options = props++,$global.create.options
devops.space.create.options.o = $global.options.o
devops.space.create.options.O = $global.options.O
devops.space.create.descr=\
Create Space with given name.\n\
Get/Show Space after create, if output options -o|-O are specified.

devops.space.update = Update Space
devops.space.update.args = spaceId
devops.space.update.args.spaceId = $devops.space.id
devops.space.update.options = $devops.space.create.options
devops.space.update.options.props = $devops.space.create.options.props
devops.space.update.options.o = $global.options.o
devops.space.update.options.O = $global.options.O
devops.space.update.descr=\
Update Space with specified id.\n\
Get/Show Space after update, if output options -o|-O are specified.

devops.space.delete = Delete Space
devops.space.delete.args = spaceId
devops.space.delete.args.spaceId = $devops.space.id
devops.space.delete.options = $general.delete.options
devops.space.delete.options.o = $global.options.o
devops.space.delete.options.O = $global.options.O
devops.space.delete.descr = \
Delete Space with specified id.\n\
List Spaces after delete, if output options -o|-O are specified.

devops.space.attach = Attach Space from Cluster

devops.space.set = Set current Space
devops.space.set.args = spaceId
devops.space.set.args.spaceId = $devops.space.id
devops.space.set.options = o
devops.space.set.options.o = $devops.options.pwd
devops.space.set.descr =\
Set current Space.\n\
Implicitly sets also the current Cluster.\n\
Used as default for resolving namespaced resources (e.g. Deployments, Jobs, CronJobs).

devops.space.unset = Unset current Space
devops.space.unset.descr =\
Unsets current Space.\n\
Namespaced resources need to be qualified with option -n|--ns.

devops.space.schema = Show attributes/properties of Space
devops.space.schema.options = f,g
devops.space.schema.options.f = Show attributes/properties of SpaceFilter
devops.space.schema.options.g = Show attributes/properties of SpaceOptions

devops.space.help = Show help on commands for Spaces


# Space Authority

devops.space.auth = Space Collaborator Authorities operations
devops.auth.id = Authority identifier (id | uuid | username | group)

devops.space.auth.ls = List Collaborator Authorities of Space
devops.space.auth.ls.args = spaceId+
devops.space.auth.ls.args.spaceId = $devops.space.idx
devops.space.auth.ls.options = $global.ls.options
devops.space.auth.ls.options.o = $global.options.o
devops.space.auth.ls.options.O = $global.options.O

devops.space.auth.get = Get Collaborator Authority of Space
devops.space.auth.get.args = spaceId+,authId
devops.space.auth.get.args.spaceId = $devops.space.idx
devops.space.auth.get.args.authId = $devops.auth.id

devops.space.auth.add = Add Collaborator Authority to Space
devops.space.auth.add.args = spaceId+,props++
devops.space.auth.add.args.spaceId = $devops.space.idx
devops.space.auth.add.options = u,g,manager|manage,dev|developer|write,auditor|read,props++
devops.space.auth.add.options.u = Collaborator username
devops.space.auth.add.options.g = Collaborator group
devops.space.auth.add.options.manager = Assign manager role
devops.space.auth.add.options.dev = Assign developer role
devops.space.auth.add.options.auditor = Assign auditor role
devops.space.auth.add.options.props = Authority properties
devops.space.auth.add.descr =\
Add Authority to Space with properties.\n\
Get/show after create, if output options -o|-O are specified.

devops.space.auth.update = Update Collaborator Authority of Space
devops.space.auth.update.args = spaceId+,authId+
devops.space.auth.update.args.spaceId = $devops.space.idx
devops.space.auth.update.args.authId = $devops.auth.id
devops.space.auth.update.options = u,g,manager|manage,dev|developer|write,auditor|read,props++
devops.space.auth.update.options.u = Collaborator username
devops.space.auth.update.options.g = Collaborator group
devops.space.auth.update.options.manager = Assign manager role
devops.space.auth.update.options.dev = Assign developer role
devops.space.auth.update.options.auditor = Assign auditor role
devops.space.auth.update.options.props = Authority properties
devops.space.auth.update.descr =\
If authId is not specified, the username or groupId is used.
Update Collaborator Authority of Space with specified id.\n\

devops.space.auth.resend = Resend notification of Collaborator Authority of Space
devops.space.auth.resend.args = spaceId+,authId
devops.space.auth.resend.args.spaceId = $devops.space.idx
devops.space.auth.resend.args.authId = $devops.auth.id
devops.space.auth.resend.descr =\
Resend notification of Authority of Space with specified id.\n\

devops.space.auth.delete = Delete Collaborator Authority of Space
devops.space.auth.delete.args = spaceId+,authId
devops.space.auth.delete.args.spaceId = $devops.space.idx
devops.space.auth.delete.args.authId = $devops.auth.id
devops.space.auth.delete.options = $devops.auth.ls.options
devops.space.auth.delete.options.o = $global.options.o
devops.space.auth.delete.options.O = $global.options.O
devops.space.auth.delete.descr =\
Delete Authority of Space with specified id.\n\
List after delete, if output options -o|-O are specified.

devops.space.auth.schema = Show attributes/properties of Authority

devops.space.auth.help = Show help on commands for Space Authorities

## Deployment

devops.namespaced.options = n|ns
devops.namespaced.get.options = n|ns,o,O
devops.namespaced.ls.options = $devops.namespaced.get.options

devops.deployment = Deployment operations
devops.deployment.id = Identifier of Deployment (name | id | uuid)
devops.pod.id = Identifier of Pod (name | id | uuid)
devops.ipod.id = Identifier of instance/replica/pod (name | id | uuid)

devops.event.id = Identifier of Event (name | id | uuid)
devops.event.name = Name of the Event
devops.event.ls.options= c,props++,$devops.namespaced.get.options
devops.event.get.options= $devops.namespaced.get.options
devops.event.ls.options.c= List cluster-level events
devops.event.ls.options.props= EventFilter properties of EventFilter (event schema -f)
devops.event.schema = Show schema of Event
devops.event.help = Show help on commands for Events

devops.route.id = Identifier of Route (host | dns | id | uuid)
devops.route.name = Host of the Route
devops.route.ls.options= $devops.namespaced.get.options
devops.route.get.options= $devops.namespaced.get.options
devops.mount.id = Identifier of Mount (name | id | uuid)
devops.mount.name = Name of the Mount
devops.mount.ls.options= $devops.namespaced.get.options
devops.mount.get.options= $devops.namespaced.get.options
devops.var.id = Name of the environment variable
devops.env.ls.options= $devops.namespaced.get.options
devops.env.get.options= $devops.namespaced.get.options

devops.binding.id = Identifier of Binding (name | id | uuid)
devops.binding.name = Name of the Binding
devops.binding.selector = Selector for service connector (e.g. mysql/dbname, sso)
devops.binding.options.auto = Guess binding spec from stack
devops.binding.options.xn = Reference connector in another Space
devops.binding.options.x = Reference connector of external service
devops.binding.options.spec = JSON specification of binding
devops.binding.ls.options= $devops.namespaced.get.options
devops.binding.get.options= $devops.namespaced.get.options
devops.binding.add.descr=\
The selector matches the name of a connector defined by a deployment/service.\n\
To bind to a service in different Space, use option -xn|--space.\n\
To bind to an external service, use option -x|--external.\n\
Get/show after create, if output options -o|-O are specified.

devops.connector.id = Identifier of Connector (name | id | uuid)
devops.connector.name = Name of the Connector
devops.connector.ls.options= $devops.namespaced.get.options
devops.connector.get.options= $devops.namespaced.get.options

devops.deployment.ls = List Deployments in Space
devops.deployment.ls.args = $global.ls.args
devops.deployment.ls.args.q = $global.ls.args.q
devops.deployment.ls.options = q,kind,category,status,stack,props++,$devops.deployment.get.options
devops.deployment.ls.options.q = $global.options.q
devops.deployment.ls.options.kind = Kind
devops.deployment.ls.options.category = Category
devops.deployment.ls.options.status = Status
devops.deployment.ls.options.stack = Stack
devops.deployment.ls.options.props = any property of DeploymentFilter (deployment schema -f)
devops.deployment.ls.options.n = $devops.space.idx
devops.deployment.ls.options.o = $global.options.o
devops.deployment.ls.options.O = $global.options.O

devops.deployment.get = Get Details of Deployment
devops.deployment.get.args = deployId
devops.deployment.get.args.deployId = $devops.deployment.id
devops.deployment.get.options = props++,$devops.namespaced.get.options
devops.deployment.get.options.props = any property of DeploymentOptions (deployment schema -g)
devops.deployment.get.options.n = $devops.space.idx
devops.deployment.get.options.o = $global.options.o
devops.deployment.get.options.O = $global.options.O

devops.deployment.view = View Deployment dashboard in web browser
devops.deployment.view.args = deployId
devops.deployment.view.args.deployId = $devops.deployment.id
devops.deployment.view.options = n|ns
devops.deployment.view.options.n = $devops.space.idx
devops.deployment.view.descr =\
Requires environment where a default web-browser is configured and can be started/open.\n\
You need to login via the web-browser the first time to start a web session in Cloud Manager.

devops.deployment.create = Create Deployment
devops.deployment.create.args = deployId
devops.deployment.create.args.deployId = $devops.deployment.id
devops.deployment.create.options = $devops.run.options
devops.deployment.create.options.image = $devops.run.options.image
devops.deployment.create.options.ports = $devops.run.options.ports
devops.deployment.create.options.env = $devops.run.options.env
devops.deployment.create.options.mounts = $devops.run.options.mounts
devops.deployment.create.options.r = Create Route for Deployment
devops.deployment.create.options.d = Domain of the Route. Defaults to current Domain.
devops.deployment.create.options.props = Deployment properties (deployment schema)
devops.deployment.create.options.n = $devops.space.idx
devops.deployment.create.options.track = $global.track
devops.deployment.create.options.o = $global.options.o
devops.deployment.create.options.O = $global.options.O
devops.deployment.create.descr =\
Create Deployment with specified name and properties.\n\
$devops.run.descr

devops.deployment.update = Update Deployment
devops.deployment.update.args = deployId
devops.deployment.update.args.deployId = $devops.deployment.id
devops.deployment.update.options = $devops.run.options2
devops.deployment.update.options.image = $devops.run.options.image
devops.deployment.update.options.ports = $devops.run.options.ports
devops.deployment.update.options.env = $devops.run.options.env
devops.deployment.update.options.mounts = $devops.run.options.mounts
devops.deployment.update.options.props = Deployment properties
devops.deployment.update.options.n = $devops.space.idx
devops.deployment.update.options.o = $global.options.o
devops.deployment.update.options.O = $global.options.O
devops.deployment.update.descr =\
Update properties of Deployment with specified id.\n\
$devops.run.descr

devops.deployment.delete = Delete Deployment
devops.deployment.delete.args = deployId
devops.deployment.delete.args.deployId = $devops.deployment.id
devops.deployment.delete.options = $general.delete.options
devops.deployment.delete.options.n = $devops.space.idx
devops.deployment.delete.options.o = $global.options.o
devops.deployment.delete.options.O = $global.options.O
devops.deployment.delete.descr = \
Update properties of Deployment with specified id.\n\
List Deployments in same Space after delete, if output options -o|-O are specified.


devops.deployment.scale = Scale instance/replica/pod count of Deployment
devops.deployment.scale.args = deployId,count+
devops.deployment.scale.args.deployId = $devops.deployment.id
devops.deployment.scale.args.count = Number of instance/replica/pod to scale
devops.deployment.scale.options = k|replicas|instances,track,$devops.namespaced.get.options
devops.deployment.scale.options.k = Number of instance/replica/pod to scale
devops.deployment.scale.options.track = $global.track
devops.deployment.scale.options.n = $devops.space.idx
devops.deployment.scale.options.o = $global.options.o
devops.deployment.scale.options.O = $global.options.O
devops.deployment.scale.descr = \
Scale number of instance/replica/pod count of Deployment.\n\
If current number is lower, create new instances.\n\
If current number is higher, shutdown excess instances.\n\
Get/show Deployment after scaling, if output options -o|-O are specified.

devops.deployment.resources = Scale resources of Deployment
devops.deployment.resources.args = deployId
devops.deployment.resources.args.deployId = $devops.deployment.id
devops.deployment.resources.options = m|mem,d|disk|storage,$devops.namespaced.get.options
devops.deployment.resources.options.m = Memory size (units Gi|G|Mi|M)
devops.deployment.resources.options.d = Ephemeral Disk/Storage size (units Gi|G)
devops.deployment.resources.options.n = $devops.space.idx
devops.deployment.resources.options.o = $global.options.o
devops.deployment.resources.options.O = $global.options.O
devops.deployment.resources.descr = \
Scale memory and ephemeral storage resources of Deployment.\n\
New pods are created with new resource settings, and existing pods are shutdown.\n\
Get/show Deployment after update, if output options -o|-O are specified.

devops.deployment.start = Start a Deployment
devops.deployment.start.args = deployId
devops.deployment.start.args.deployId = $devops.deployment.id
devops.deployment.start.args = deployId
devops.deployment.start.args.deployId = $devops.deployment.id
devops.deployment.start.options =  $devops.namespaced.get.options
devops.deployment.start.options.n = $devops.space.idx
devops.deployment.start.options.o = $global.options.o
devops.deployment.start.options.O = $global.options.O
devops.deployment.start.descr = \
Start a Deployment.\n\
Get/show Deployment after start, if output options -o|-O are specified.

devops.deployment.stop = Stop a Deployment
devops.deployment.stop.args = deployId
devops.deployment.stop.args.deployId = $devops.deployment.id
devops.deployment.stop.args = deployId
devops.deployment.stop.args.deployId = $devops.deployment.id
devops.deployment.stop.options =  $devops.namespaced.get.options
devops.deployment.stop.options.n = $devops.space.idx
devops.deployment.stop.options.o = $global.options.o
devops.deployment.stop.options.O = $global.options.O
devops.deployment.stop.descr = \
Stop a Deployment.\n\
Get/show Deployment after stop, if output options -o|-O are specified.

devops.deployment.restart = Restart a Deployment
devops.deployment.restart.args = deployId
devops.deployment.restart.args.deployId = $devops.deployment.id
devops.deployment.restart.args = deployId
devops.deployment.restart.args.deployId = $devops.deployment.id
devops.deployment.restart.options =  $devops.namespaced.get.options
devops.deployment.restart.options.n = $devops.space.idx
devops.deployment.restart.options.o = $global.options.o
devops.deployment.restart.options.O = $global.options.O
devops.deployment.restart.descr = \
Stop a Deployment.\n\
Get/show Deployment after restart, if output options -o|-O are specified.

devops.deployment.sync = Synchronize Deployment state/details from the cluster
devops.deployment.sync.args = deployId
devops.deployment.sync.args.deployId = $devops.deployment.id
devops.deployment.sync.args = deployId
devops.deployment.sync.args.deployId = $devops.deployment.id
devops.deployment.sync.options =  $devops.deployment.get.options
devops.deployment.sync.options.n = $devops.space.idx
devops.deployment.sync.options.o = $global.options.o
devops.deployment.sync.options.O = $global.options.O
devops.deployment.sync.descr = \
Synchronize Deployment state/details from the cluster.\n\
Get/show Deployment after sync, if output options -o|-O are specified.


devops.deployment.attach = Attach a Deployment from the cluster
devops.deployment.attach.args = deployId
devops.deployment.attach.args.deployId = $devops.deployment.id
devops.deployment.attach.options =  $devops.deployment.get.options
devops.deployment.attach.options.n = $devops.space.idx
devops.deployment.attach.options.o = $global.options.o
devops.deployment.attach.options.O = $global.options.O
devops.deployment.attach.descr = \
Attach a Deployment from the cluster.\n\
Get/show Deployment after attach, if output options -o|-O are specified.


devops.deployment.exec = Execute command on instance/replica/pod of Deployment
devops.deployment.exec.args = deployId,podId+
devops.deployment.exec.args.deployId = $devops.deployment.id
devops.deployment.exec.args.podId = $devops.ipod.id
devops.deployment.exec.options =  pod,html,$devops.namespaced.options
devops.deployment.exec.options.pod = $devops.ipod.id
devops.deployment.exec.options.html = Show output as HTML 
devops.deployment.exec.options.n = $devops.space.idx
devops.deployment.exec.extra = command args...
devops.deployment.exec.descr = \
Execute command on instance/replica/pod of Deployment.\n\
If pod is not specified, the first pod is considered.\n\

devops.deployment.logs = View logs of instance/replica/pod of Deployment
devops.deployment.logs.args = deployId,podId+
devops.deployment.logs.args.deployId = $devops.deployment.id
devops.deployment.logs.args.podId = Pod/Instance name. Defaults to first pod.
devops.deployment.logs.options =  l|tailLines,pod,c|container,html,$devops.namespaced.options
devops.deployment.logs.options.l = Number of tail lines to show
devops.deployment.logs.options.pod = Pod/Instance name. Defaults to first pod.
devops.deployment.logs.options.c = Container name inside pod/Instance name. Defaults to first container.
devops.deployment.logs.options.html = Show logs as HTML
devops.deployment.logs.options.n = $devops.space.idx
devops.deployment.logs.descr = \
Show logs of instance/replica/pod of Deployment.\n\
If pod is not specified, the first pod is considered.

devops.deployment.go = Open web-browser in URL of primary Route of Deployment
devops.deployment.go.args = deployId
devops.deployment.go.args.deployId = $devops.deployment.id
devops.deployment.go.options = $global.ls.options
devops.deployment.go.options.n = $devops.space.idx
devops.deployment.go.descr =\
Primary route is the one is flag primary, or the first one if none is marked as primary.\n\
Requires environment where a default web-browser is configured and can be started/open.

devops.deployment.schema = Show attributes/properties of Deployment
devops.deployment.schema.options = f,g
devops.deployment.schema.options.f = Show attributes/properties of DeploymentFilter
devops.deployment.schema.options.g = Show attributes/properties of DeploymentOptions

devops.deployment.help = Show help on commands for Deployments


# Deployment Events
devops.deployment.event = Operations on Deployment Events

devops.deployment.event.ls = List Deployment Events
devops.deployment.event.ls.args = deployId
devops.deployment.event.ls.args.deployId = $devops.deployment.id
devops.deployment.event.ls.options = $devops.event.ls.options
devops.deployment.event.ls.options.c = $devops.event.ls.options.c
devops.deployment.event.ls.options.props = $devops.event.ls.options.props
devops.deployment.event.ls.options.n = $devops.space.idx
devops.deployment.event.ls.options.o = $global.options.o
devops.deployment.event.ls.options.O = $global.options.O
devops.deployment.event.ls.descr = \
List Deployment Events.\n\
Use option -c to list cluster-level Deployment events.

devops.deployment.event.delete = Delete Deployment Event
devops.deployment.event.delete.args = deployId,eventId
devops.deployment.event.delete.args.deployId = $devops.deployment.id
devops.deployment.event.delete.args.eventId = $devops.event.id
devops.deployment.event.delete.options = $devops.event.ls.options
devops.deployment.event.delete.options.n = $devops.space.idx
devops.deployment.event.delete.options.o = $global.options.o
devops.deployment.event.delete.options.O = $global.options.O
devops.deployment.event.delete.descr =\
Delete Event of Deployment with specified id.\n\
List after delete, if output options -o|-O are specified.

devops.deployment.event.schema = $devops.event.schema 
devops.deployment.event.help = $devops.event.help

# Deployment instance/replica/pods

devops.deployment.pod = Operations on instances/replicas/pods of Deployment

devops.deployment.pod.ls = List instances/replicas/pods of Deployment
devops.deployment.pod.ls.args = deployId
devops.deployment.pod.ls.args.deployId = $devops.deployment.id
devops.deployment.pod.ls.options = q,status,props++,$devops.namespaced.get.options
devops.deployment.pod.ls.options.q = $global.options.q
devops.deployment.pod.ls.options.status = Status
devops.deployment.pod.ls.options.props = any property of DeploymentFilter (deployment schema -f)
devops.deployment.pod.ls.options.n = $devops.space.idx
devops.deployment.pod.ls.options.o = $global.options.o
devops.deployment.pod.ls.options.O = $global.options.O
devops.deployment.pod.ls.descr = \
List instances/replicas/pods of Deployment.

devops.deployment.pod.kill = Kill instance/replica/pod of Deployment
devops.deployment.pod.kill.args = deployId,podId
devops.deployment.pod.kill.args.deployId = $devops.deployment.id
devops.deployment.pod.kill.args.podId = $devops.ipod.id
devops.deployment.pod.kill.descr = \
Kill instance/replica/pod of Deployment.\n\
If pod is not specified, the first pod is considered.\n\
Get/show Deployment after kill, if output options -o|-O are specified.

devops.deployment.pod.help = Show help on commands for Deployments Pods

## Deployment Route

devops.deployment.route = Deployment Routes operations

devops.deployment.route.ls = List Routes of Deployment
devops.deployment.route.ls.args = deployId
devops.deployment.route.ls.args.deployId = $devops.deployment.id
devops.deployment.route.ls.options = $devops.namespaced.ls.options
devops.deployment.route.ls.options.n = $devops.space.idx
devops.deployment.route.ls.options.o = $global.options.o
devops.deployment.route.ls.options.O = $global.options.O

devops.deployment.route.get = Get Route of Deployment
devops.deployment.route.get.args = deployId,routeId
devops.deployment.route.get.args.deployId = $devops.deployment.id
devops.deployment.route.get.args.routeId = $devops.route.id

devops.deployment.route.add = Add Route to Deployment
devops.deployment.route.add.args = deployId,routeId,props++
devops.deployment.route.add.args.deployId = $devops.deployment.id
devops.deployment.route.add.args.routeId = $devops.route.name
devops.deployment.route.add.options = d,props++
devops.deployment.route.add.options.d = $devops.domain.idx
devops.deployment.route.add.options.props = Route properties
devops.deployment.route.add.descr =\
Add Route to Deployment with specified host and properties.\n\
Option -d specified Domain. Defaults to current Domain.\n\
A Kubernetes ingress is created for the Route.\n\
If --sharedIngress=true is specified a common ingress is used.\n\
If domain uses TLS, a secret is created for the certificate.\n\
Get/show after create, if output options -o|-O are specified.

devops.deployment.route.update = Update Route of Deployment
devops.deployment.route.update.args = deployId,routeId
devops.deployment.route.update.args.deployId = $devops.deployment.id
devops.deployment.route.update.args.routeId = $devops.route.id
devops.deployment.route.update.options = d,props++,$devops.deployment.get.options
devops.deployment.route.update.options.d = $devops.domain.idx
devops.deployment.route.update.options.props = $devops.deployment.route.add.options.props
devops.deployment.route.update.options.n = $devops.space.idx
devops.deployment.route.update.options.o = $global.options.o
devops.deployment.route.update.options.O = $global.options.O
devops.deployment.route.update.descr =\
Update properties of Route of Deployment with specified id.\n\
Option -d specified Domain. Defaults to current Domain.\n\
Get/show after update, if output options -o|-O are specified.

devops.deployment.route.delete = Delete Route of Deployment
devops.deployment.route.delete.args = deployId,routeId
devops.deployment.route.delete.args.deployId = $devops.deployment.id
devops.deployment.route.delete.args.routeId = $devops.route.id
devops.deployment.route.delete.options = $devops.route.ls.options
devops.deployment.route.delete.options.n = $devops.space.idx
devops.deployment.route.delete.options.o = $global.options.o
devops.deployment.route.delete.options.O = $global.options.O
devops.deployment.route.delete.descr =\
Delete Route of Deployment with specified id.\n\
List after delete, if output options -o|-O are specified.

devops.deployment.route.go = Open Route URL in web-browser
devops.deployment.route.go.args = deployId,routeId
devops.deployment.route.go.args.deployId = $devops.deployment.id
devops.deployment.route.go.args.routeId = $devops.route.id
devops.deployment.route.go.options = $devops.route.ls.options
devops.deployment.route.go.options.n = $devops.space.idx
devops.deployment.route.go.options.o = $global.options.o
devops.deployment.route.go.options.O = $global.options.O
devops.deployment.route.go.descr =\
Requires environment where a default web-browser is configured and can be started/open.

devops.deployment.route.schema = Show attributes/properties of Route
devops.deployment.route.help = Show help on commands for Deployment Routes


## Route (short-cut)

devops.route = $devops.deployment.route

devops.route.ls = $devops.deployment.route.ls 
devops.route.ls.args = $devops.deployment.route.ls.args 
devops.route.ls.args.deployId = $devops.deployment.route.ls.args.deployId
devops.route.ls.options = $devops.deployment.route.ls.options
devops.route.ls.options.n = $devops.deployment.route.ls.options.n 
devops.route.ls.options.o = $devops.deployment.route.ls.options.o
devops.route.ls.options.O = $devops.deployment.route.ls.options.o

devops.route.get = $devops.deployment.route.get
devops.route.get.args = $devops.deployment.route.get.args
devops.route.get.args.deployId = $devops.deployment.route.get.args.deployId
devops.route.get.args.routeId = $devops.deployment.route.get.args.routeId

devops.route.add = $devops.deployment.route.add
devops.route.add.args = $devops.deployment.route.add.args
devops.route.add.args.deployId = $devops.deployment.route.add.args.deployId
devops.route.add.args.routeId = $devops.deployment.route.add.args.routeId
devops.route.add.options = $devops.deployment.route.add.options
devops.route.add.options.d = $devops.deployment.route.add.options.d
devops.route.add.options.props = $devops.deployment.route.add.options.props
devops.route.add.descr = $devops.deployment.route.add.descr

devops.route.update = $devops.deployment.route.update
devops.route.update.args = $devops.deployment.route.update.args
devops.route.update.args.deployId = $devops.deployment.route.update.args.deployId
devops.route.update.args.routeId = $devops.deployment.route.update.args.routeId
devops.route.update.options = $devops.deployment.route.update.options
devops.route.update.options.d = $devops.deployment.route.update.options.d
devops.route.update.options.props = $devops.deployment.route.update.options.props
devops.route.update.options.n = $devops.deployment.route.update.options.n
devops.route.update.options.o = $devops.deployment.route.update.options.o
devops.route.update.options.O = $devops.deployment.route.update.options.O
devops.route.update.descr = $devops.deployment.route.update.descr

devops.route.delete = $devops.deployment.route.delete
devops.route.delete.args = $devops.deployment.route.delete.args
devops.route.delete.args.deployId = $devops.deployment.route.delete.args.deployId
devops.route.delete.args.routeId = $devops.deployment.route.delete.args.routeId
devops.route.delete.options = $devops.deployment.route.delete.options
devops.route.delete.options.n = $devops.deployment.route.delete.options.n
devops.route.delete.options.o = $devops.deployment.route.delete.options.o
devops.route.delete.options.O = $devops.deployment.route.delete.options.O
devops.route.delete.descr = $devops.deployment.route.delete.descr

devops.route.go = $devops.deployment.route.go
devops.route.go.args = $devops.deployment.route.go.args
devops.route.go.args.deployId = $devops.deployment.route.go.args.deployId
devops.route.go.args.routeId = $devops.deployment.route.go.args.routeId
devops.route.go.options = $devops.deployment.route.go.options
devops.route.go.options.n = $devops.deployment.route.go.options.n
devops.route.go.options.o = $devops.deployment.route.go.options.o
devops.route.go.options.O = $devops.deployment.route.go.options.O
devops.route.go.descr = $devops.deployment.route.go.descr

devops.route.schema = $devops.deployment.route.schema
devops.route.help = $devops.deployment.route.help


# Deployment Mount

devops.deployment.mount = Deployment Mounts operations

devops.deployment.mount.ls = List Mounts of Deployment
devops.deployment.mount.ls.args = deployId
devops.deployment.mount.ls.args.deployId = $devops.deployment.id
devops.deployment.mount.ls.options = $devops.namespaced.ls.options
devops.deployment.mount.ls.options.n = $devops.space.idx
devops.deployment.mount.ls.options.o = $global.options.o
devops.deployment.mount.ls.options.O = $global.options.O

devops.deployment.mount.get = Get Mount of Deployment
devops.deployment.mount.get.args = deployId,mountId
devops.deployment.mount.get.args.deployId = $devops.deployment.id
devops.deployment.mount.get.args.mountId = $devops.mount.id
devops.deployment.mount.get.options = $devops.namespaced.get.options
devops.deployment.mount.get.options.n = $devops.space.idx
devops.deployment.mount.get.options.o = $global.options.o
devops.deployment.mount.get.options.O = $global.options.O

devops.deployment.mount.add = Add Mount to Deployment
devops.deployment.mount.add.args = deployId,name,props++
devops.deployment.mount.add.args.deployId = $devops.deployment.id
devops.deployment.mount.add.args.name = $devops.mount.name
devops.deployment.mount.add.options = props++,$devops.namespaced.get.options
devops.deployment.mount.add.options.n = $devops.space.idx
devops.deployment.mount.add.options.o = $global.options.o
devops.deployment.mount.add.options.O = $global.options.O
devops.deployment.mount.add.options.props = Mount properties
devops.deployment.mount.add.descr =\
Add Mount to Deployment with specified properties.\n\
Get/show after create, if output options -o|-O are specified.

devops.deployment.mount.update = Update Mount of Deployment
devops.deployment.mount.update.args = deployId,mountId
devops.deployment.mount.update.args.deployId = $devops.deployment.id
devops.deployment.mount.update.args.mountId = $devops.mount.id
devops.deployment.mount.update.options = props++,$devops.namespaced.get.options
devops.deployment.mount.update.options.props = $devops.deployment.mount.add.options.props
devops.deployment.mount.update.options.n = $devops.space.idx
devops.deployment.mount.update.options.o = $global.options.o
devops.deployment.mount.update.options.O = $global.options.O
devops.deployment.mount.update.descr =\
Update properties of Mount of Deployment with specified id.\n\
Get/show after update, if output options -o|-O are specified.

devops.deployment.mount.delete = Delete Mount of Deployment
devops.deployment.mount.delete.args = deployId,mountId
devops.deployment.mount.delete.args.deployId = $devops.deployment.id
devops.deployment.mount.delete.args.mountId = $devops.mount.id
devops.deployment.mount.delete.options = $devops.mount.ls.options
devops.deployment.mount.delete.options.n = $devops.space.idx
devops.deployment.mount.delete.options.o = $global.options.o
devops.deployment.mount.delete.options.O = $global.options.O
devops.deployment.mount.delete.descr =\
Delete Mount of Deployment with specified id.\n\
List after delete, if output options -o|-O are specified.

devops.deployment.mount.schema = Show attributes/properties of Mount
devops.deployment.mount.help = Show help on commands for Deployment Mounts


# Deployment Environment Variables

devops.deployment.env = Deployment Environment Variables operations

devops.deployment.env.ls = List Environment Variables of Deployment
devops.deployment.env.ls.args = deployId
devops.deployment.env.ls.args.deployId = $devops.deployment.id
devops.deployment.env.ls.options = $devops.namespaced.ls.options
devops.deployment.env.ls.options.n = $devops.space.idx
devops.deployment.env.ls.options.o = $global.options.o
devops.deployment.env.ls.options.O = $global.options.O

devops.deployment.env.get = Get Environment Variable of Deployment
devops.deployment.env.get.args = deployId,name
devops.deployment.env.get.args.deployId = $devops.deployment.id
devops.deployment.env.get.args.name = $devops.env.id
devops.deployment.env.get.options = $devops.namespaced.get.options
devops.deployment.env.get.options.n = $devops.space.idx
devops.deployment.env.get.options.o = $global.options.o
devops.deployment.env.get.options.O = $global.options.O


devops.deployment.env.add = Add Environment Variable to Deployment
devops.deployment.env.add.args = deployId,name
devops.deployment.env.add.args.deployId = $devops.deployment.id
devops.deployment.env.add.args.name = $devops.env.name
devops.deployment.env.add.options = value,configmap,secret,key,props++,$devops.namespaced.get.options
devops.deployment.env.add.options.value = Value of Environment Variable  
devops.deployment.env.add.options.configmap = Name of a configmap
devops.deployment.env.add.options.secret = Name of a secret
devops.deployment.env.add.options.key = Key in configmap or secret
devops.deployment.env.add.options.n = $devops.space.idx
devops.deployment.env.add.options.o = $global.options.o
devops.deployment.env.add.options.O = $global.options.O
devops.deployment.env.add.options.props = Environment Variable properties
devops.deployment.env.add.descr =\
Add Environment Variable to Deployment with specified host and properties.\n\
Get/show after create, if output options -o|-O are specified.

devops.deployment.env.update = Update Environment Variable of Deployment
devops.deployment.env.update.args = deployId,name
devops.deployment.env.update.args.deployId = $devops.deployment.id
devops.deployment.env.update.args.name = $devops.env.id
devops.deployment.env.update.options = $devops.deployment.env.add.options
devops.deployment.env.update.options.value = Value of Environment Variable  
devops.deployment.env.update.options.configmap = Name of a configmap
devops.deployment.env.update.options.secret = Name of a secret
devops.deployment.env.update.options.key = Key in configmap or secret
devops.deployment.env.update.options.props = $devops.deployment.env.add.options.props
devops.deployment.env.update.options.n = $devops.space.idx
devops.deployment.env.update.options.o = $global.options.o
devops.deployment.env.update.options.O = $global.options.O
devops.deployment.env.update.descr =\
Update properties of Environment Variable of Deployment with specified id.\n\
Get/show after update, if output options -o|-O are specified.

devops.deployment.env.delete = Delete Environment Variable of Deployment
devops.deployment.env.delete.args = deployId,name
devops.deployment.env.delete.args.deployId = $devops.deployment.id
devops.deployment.env.delete.args.name = $devops.env.id
devops.deployment.env.delete.options = $devops.env.ls.options
devops.deployment.env.delete.options.n = $devops.space.idx
devops.deployment.env.delete.options.o = $global.options.o
devops.deployment.env.delete.options.O = $global.options.O
devops.deployment.env.delete.descr =\
Delete Environment Variable of Deployment with specified id.\n\
List after delete, if output options -o|-O are specified.

devops.deployment.env.schema = Show attributes/properties of Environment Variable
devops.deployment.env.help = Show help on commands for Deployment Environment Variables

# Deployment Bindings


devops.deployment.binding = Deployment Bindings operations

devops.deployment.binding.ls = List Bindings of Deployment
devops.deployment.binding.ls.args = deployId
devops.deployment.binding.ls.args.deployId = $devops.deployment.id
devops.deployment.binding.ls.options = $devops.namespaced.ls.options
devops.deployment.binding.ls.options.n = $devops.space.idx
devops.deployment.binding.ls.options.o = $global.options.o
devops.deployment.binding.ls.options.O = $global.options.O

devops.deployment.binding.get = Get Binding of Deployment
devops.deployment.binding.get.args = deployId,bindingId
devops.deployment.binding.get.args.deployId = $devops.deployment.id
devops.deployment.binding.get.args.bindingId = $devops.binding.id
devops.deployment.binding.get.options = $devops.namespaced.get.options
devops.deployment.binding.get.options.n = $devops.space.idx
devops.deployment.binding.get.options.o = $global.options.o
devops.deployment.binding.get.options.O = $global.options.O


devops.deployment.binding.add = Add Binding to Deployment
devops.deployment.binding.add.args = deployId,selector+
devops.deployment.binding.add.args.deployId = $devops.deployment.id
devops.deployment.binding.add.args.selector = $devops.binding.selector
devops.deployment.binding.add.options = spec,auto,xn|space,x|external,props++,$devops.namespaced.get.options
devops.deployment.binding.add.options.selector = $devops.binding.selector
devops.deployment.binding.add.options.auto = $devops.binding.options.auto
devops.deployment.binding.add.options.xn = $devops.binding.options.xn
devops.deployment.binding.add.options.x = $devops.binding.options.x
devops.deployment.binding.add.options.spec = $devops.binding.options.spec
devops.deployment.binding.add.options.n = $devops.space.idx
devops.deployment.binding.add.options.o = $global.options.o
devops.deployment.binding.add.options.O = $global.options.O
devops.deployment.binding.add.options.props = Binding properties
devops.deployment.binding.add.descr =\
Add Binding to Deployment with specified properties.\n\
$devops.binding.add.descr

devops.deployment.binding.update = Update Binding of Deployment
devops.deployment.binding.update.args = deployId,bindingId
devops.deployment.binding.update.args.deployId = $devops.deployment.id
devops.deployment.binding.update.args.bindingId = $devops.binding.id
devops.deployment.binding.update.options = props++,$devops.deployment.get.options
devops.deployment.binding.update.options = selector,$devops.deployment.binding.add.options
devops.deployment.binding.update.options.selector =$devops.binding.selector
devops.deployment.binding.update.options.auto = $devops.binding.options.auto
devops.deployment.binding.update.options.xn = $devops.binding.options.xn
devops.deployment.binding.update.options.x = $devops.binding.options.x
devops.deployment.binding.update.options.spec = $devops.binding.options.spec
devops.deployment.binding.update.options.props = $devops.deployment.binding.add.options.props
devops.deployment.binding.update.options.n = $devops.space.idx
devops.deployment.binding.update.options.o = $global.options.o
devops.deployment.binding.update.options.O = $global.options.O
devops.deployment.binding.update.options.props = Binding properties
devops.deployment.binding.update.descr =\
Update properties of Binding of Deployment with specified id.\n\
$devops.binding.add.descr

devops.deployment.binding.delete = Delete Binding of Deployment
devops.deployment.binding.delete.args = deployId,bindingId
devops.deployment.binding.delete.args.deployId = $devops.deployment.id
devops.deployment.binding.delete.args.bindingId = $devops.binding.id
devops.deployment.binding.delete.options = $devops.binding.ls.options
devops.deployment.binding.delete.options.n = $devops.space.idx
devops.deployment.binding.delete.options.o = $global.options.o
devops.deployment.binding.delete.options.O = $global.options.O
devops.deployment.binding.delete.descr =\
Delete Binding of Deployment with specified id.\n\
List after delete, if output options -o|-O are specified.

devops.deployment.binding.schema = Show attributes/properties of Binding
devops.deployment.binding.help = Show help on commands for Deployment Bindings



# Deployment Connectors


devops.deployment.connector = Deployment Connectors operations

devops.deployment.connector.ls = List Connectors of Deployment
devops.deployment.connector.ls.args = deployId
devops.deployment.connector.ls.args.deployId = $devops.deployment.id
devops.deployment.connector.ls.options = $devops.namespaced.ls.options
devops.deployment.connector.ls.options.n = $devops.space.idx
devops.deployment.connector.ls.options.o = $global.options.o
devops.deployment.connector.ls.options.O = $global.options.O

devops.deployment.connector.get = Get Connector of Deployment
devops.deployment.connector.get.args = deployId,connectorId
devops.deployment.connector.get.args.deployId = $devops.deployment.id
devops.deployment.connector.get.args.connectorId = $devops.connector.id
devops.deployment.connector.get.options = $devops.namespaced.get.options
devops.deployment.connector.get.options.n = $devops.space.idx
devops.deployment.connector.get.options.o = $global.options.o
devops.deployment.connector.get.options.O = $global.options.O

devops.deployment.connector.add = Add Connector to Deployment
devops.deployment.connector.add.args = deployId,name,props++
devops.deployment.connector.add.args.deployId = $devops.deployment.id
devops.deployment.connector.add.args.name = $devops.connector.name
devops.deployment.connector.add.options = spec,props++,$devops.namespaced.get.options
devops.deployment.connector.add.options.spec = JSON specification of connector
devops.deployment.connector.add.options.n = $devops.space.idx
devops.deployment.connector.add.options.o = $global.options.o
devops.deployment.connector.add.options.O = $global.options.O
devops.deployment.connector.add.options.props = Connector properties
devops.deployment.connector.add.descr =\
Add Connector to Deployment with specified host and properties.\n\
Get/show after create, if output options -o|-O are specified.

devops.deployment.connector.update = Update Connector of Deployment
devops.deployment.connector.update.descr =\
Update properties of Connector of Deployment with specified id.\n\
Get/show after update, if output options -o|-O are specified.
devops.deployment.connector.update.args = deployId,connectorId
devops.deployment.connector.update.args.deployId = $devops.deployment.id
devops.deployment.connector.update.args.connectorId = $devops.connector.id
devops.deployment.connector.update.options = spec,props++,$devops.deployment.get.options
devops.deployment.connector.update.options.props = $devops.deployment.connector.add.options.props
devops.deployment.connector.add.options.spec = JSON specification of connector
devops.deployment.connector.update.options.n = $devops.space.idx
devops.deployment.connector.update.options.o = $global.options.o
devops.deployment.connector.update.options.O = $global.options.O

devops.deployment.connector.refresh = Refresh Connector of Deployment
devops.deployment.connector.refresh.args = deployId,connectorId
devops.deployment.connector.refresh.args.deployId = $devops.deployment.id
devops.deployment.connector.refresh.args.connectorId = $devops.connector.id
devops.deployment.connector.refresh.options = $devops.deployment.get.options
devops.deployment.connector.refresh.options.n = $devops.space.idx
devops.deployment.connector.refresh.options.o = $global.options.o
devops.deployment.connector.refresh.options.O = $global.options.O
devops.deployment.connector.refresh.descr =\
Refresh Connector of Deployment with specified by reevaluating meta-data from spec.\n\
Get/show after refresh, if output options -o|-O are specified.

devops.deployment.connector.delete = Delete Connector of Deployment
devops.deployment.connector.delete.args = deployId,connectorId
devops.deployment.connector.delete.args.deployId = $devops.deployment.id
devops.deployment.connector.delete.args.connectorId = $devops.connector.id
devops.deployment.connector.delete.options = $devops.connector.ls.options
devops.deployment.connector.delete.options.n = $devops.space.idx
devops.deployment.connector.delete.options.o = $global.options.o
devops.deployment.connector.delete.options.O = $global.options.O
devops.deployment.connector.delete.descr =\
Delete Connector of Deployment with specified id.\n\
List after delete, if output options -o|-O are specified.

devops.deployment.connector.schema = Show attributes/properties of Connector
devops.deployment.connector.help = Show help on commands for Deployment Connectors

# Deployment Job

devops.job = Job operations
devops.job.id = Identifier of Job (name | id | uuid)

devops.job.ls = List Jobs in Space
devops.job.ls.args = $global.ls.args
devops.job.ls.args.q = $global.ls.args.q
devops.job.ls.options = q,status,stack,props++,$devops.job.get.options
devops.job.ls.options.q = $global.options.q
devops.job.ls.options.status = Status
devops.job.ls.options.stack = Stack
devops.job.ls.options.props = any property of JobFilter (job schema -f)
devops.job.ls.options.n = $devops.space.idx
devops.job.ls.options.o = $global.options.o
devops.job.ls.options.O = $global.options.O

devops.job.get = Get Details of Job
devops.job.get.args = jobId
devops.job.get.args.jobId = $devops.job.id
devops.job.get.options = props++,$devops.namespaced.get.options
devops.job.get.options.props = any property of JobOptions (job schema -g)
devops.job.get.options.n = $devops.space.idx
devops.job.get.options.o = $global.options.o
devops.job.get.options.O = $global.options.O

devops.job.view = View Job dashboard in web browser
devops.job.view.args = jobId
devops.job.view.args.jobId = $devops.job.id
devops.job.view.options = n|ns
devops.job.view.options.n = $devops.space.idx
devops.job.view.descr =\
Requires environment where a default web-browser is configured and can be started/open.\n\
You need to login via the web-browser the first time to start a web session in Cloud Manager.

devops.job.view = View Job dashboard in web browser
devops.job.view.args = jobId
devops.job.view.args.jobId = $devops.job.id
devops.job.view.options = n|ns
devops.job.view.options.n = $devops.space.idx
devops.job.view.descr =\
Requires environment where a default web-browser is configured and can be started/open.\n\
You need to login via the web-browser the first time to start a web session in Cloud Manager.

devops.job.create = Create Job
devops.job.create.args = jobId
devops.job.create.args.jobId = $devops.job.id
devops.job.create.options = image,env,mounts|mount,props++,track,$devops.namespaced.get.options
devops.job.create.options.image = $devops.run.options.image
devops.job.create.options.env = $devops.run.options.env
devops.job.create.options.mounts = $devops.run.options.mounts
devops.job.create.options.props = Job properties (job schema)
devops.job.create.options.n = $devops.space.idx
devops.job.create.options.track = $devops.options.track
devops.job.create.options.o = $global.options.o
devops.job.create.options.O = $global.options.O
devops.job.create.descr =\
Create Job with specified name and properties.\n\
$devops.run.descr0

devops.job.update = Update Job
devops.job.update.args = jobId
devops.job.update.args.jobId = $devops.job.id
devops.job.update.options = $devops.job.create.options
devops.job.update.options.image = $devops.run.options.image
devops.job.update.options.env = $devops.run.options.env
devops.job.update.options.mounts = $devops.run.options.mounts
devops.job.update.options.props = $devops.job.update.options.props
devops.job.update.options.track = $devops.options.track
devops.job.update.options.n = $devops.space.idx
devops.job.update.options.o = $global.options.o
devops.job.update.options.O = $global.options.O
devops.job.update.descr =\
Update properties of Job with specified id.\n\
$devops.run.descr0

devops.job.delete = Delete Job
devops.job.delete.args = jobId
devops.job.delete.args.jobId = $devops.job.id
devops.job.delete.options = $devops.namespaced.get.options
devops.job.delete.options.n = $devops.space.idx
devops.job.delete.options.o = $global.options.o
devops.job.delete.options.O = $global.options.O
devops.job.delete.descr = \
Update properties of Job with specified id.\n\
List Jobs in same Space after delete, if output options -o|-O are specified.

devops.job.resources = Scale resources of Job
devops.job.resources.args = jobId
devops.job.resources.args.jobId = $devops.job.id
devops.job.resources.options = m|mem,d|disk|storage,$devops.job.get.options
devops.job.resources.options.m = Memory size (units Gi|G|Mi|M)
devops.job.resources.options.d = Ephemeral Disk/Storage size (units Gi|G)
devops.job.resources.options.n = $devops.space.idx
devops.job.resources.options.o = $global.options.o
devops.job.resources.options.O = $global.options.O
devops.job.resources.descr = \
Scale memory and ephemeral storage resources of Job.\n\
New pods are created with new resource settings.\n\
Get/show Job after update, if output options -o|-O are specified.

devops.job.start = Start a Job
devops.job.start.args = jobId
devops.job.start.args.jobId = $devops.job.id
devops.job.start.args = jobId
devops.job.start.args.jobId = $devops.job.id
devops.job.start.options =  $devops.job.get.options
devops.job.start.options.n = $devops.space.idx
devops.job.start.options.o = $global.options.o
devops.job.start.options.O = $global.options.O
devops.job.start.descr = \
Start a Job.\n\
Get/show Job after start, if output options -o|-O are specified.

devops.job.stop = Stop a Job
devops.job.stop.args = jobId
devops.job.stop.args.jobId = $devops.job.id
devops.job.stop.args = jobId
devops.job.stop.args.jobId = $devops.job.id
devops.job.stop.options =  $devops.job.get.options
devops.job.stop.options.n = $devops.space.idx
devops.job.stop.options.o = $global.options.o
devops.job.stop.options.O = $global.options.O
devops.job.stop.descr = \
Stop a Job.\n\
Get/show Job after stop, if output options -o|-O are specified.

devops.job.restart = Restart a Job
devops.job.restart.args = jobId
devops.job.restart.args.jobId = $devops.job.id
devops.job.restart.args = jobId
devops.job.restart.args.jobId = $devops.job.id
devops.job.restart.options =  $devops.job.get.options
devops.job.restart.options.n = $devops.space.idx
devops.job.restart.options.o = $global.options.o
devops.job.restart.options.O = $global.options.O
devops.job.restart.descr = \
Stop a Job.\n\
Get/show Job after restart, if output options -o|-O are specified.

devops.job.sync = Synchronize Job state/details from the cluster
devops.job.sync.args = jobId
devops.job.sync.args.jobId = $devops.job.id
devops.job.sync.args = jobId
devops.job.sync.args.jobId = $devops.job.id
devops.job.sync.options =  $devops.job.get.options
devops.job.sync.options.n = $devops.space.idx
devops.job.sync.options.o = $global.options.o
devops.job.sync.options.O = $global.options.O
devops.job.sync.descr = \
Synchronize Job state/details from the cluster.\n\
Get/show Job after sync, if output options -o|-O are specified.


devops.job.attach = Attach a Job from the cluster
devops.job.attach.args = jobId
devops.job.attach.args.jobId = $devops.job.id
devops.job.attach.options =  $devops.job.get.options
devops.job.attach.options.n = $devops.space.idx
devops.job.attach.options.o = $global.options.o
devops.job.attach.options.O = $global.options.O
devops.job.attach.descr = \
Attach a Job from the cluster.\n\
Get/show Job after attach, if output options -o|-O are specified.


devops.job.exec = Execute command on instance/replica/pod of Job
devops.job.exec.args = jobId,podId+
devops.job.exec.args.jobId = $devops.job.id
devops.job.exec.args.podId = $devops.ipod.id
devops.job.exec.options =  pod,html,$devops.namespaced.options
devops.job.exec.options.pod = $devops.ipod.id
devops.job.exec.options.html = Show output as HTML 
devops.job.exec.options.n = $devops.space.idx
devops.job.exec.extra = command args...
devops.job.exec.descr = \
Execute command on instance/replica/pod of Job.\n\
If pod is not specified, the first pod is considered.

devops.job.logs = View logs of instance/replica/pod of Job
devops.job.logs.args = jobId,podId+
devops.job.logs.args.jobId = $devops.job.id
devops.job.logs.args.podId = Pod/Instance name. Defaults to first pod.
devops.job.logs.options =  l|tailLines,pod,c|container,html,$devops.namespaced.options
devops.job.logs.options.l = Number of tail lines to show
devops.job.logs.options.pod = Pod/Instance name. Defaults to first pod.
devops.job.logs.options.c = Container name inside pod/Instance name. Defaults to first container.
devops.job.logs.options.html = Show logs as HTML
devops.job.logs.options.n = $devops.space.idx
devops.job.logs.descr = \
Show logs of instance/replica/pod of Job.\n\
If pod is not specified, the first pod is considered.

devops.job.schema = Show attributes/properties of Job
devops.job.schema.options = f,g
devops.job.schema.options.f = Show attributes/properties of JobFilter
devops.job.schema.options.g = Show attributes/properties of JobOptions

devops.job.help = Show help on commands for Jobs

# Job Events
devops.job.event = Operations on Job Events

devops.job.event.ls = List Job Events
devops.job.event.ls.args = jobId
devops.job.event.ls.args.jobId = $devops.job.id
devops.job.event.ls.options = $devops.event.ls.options
devops.job.event.ls.options.props = $devops.event.ls.options.props
devops.job.event.ls.options.c = $devops.event.ls.options.c
devops.job.event.ls.options.n = $devops.space.idx
devops.job.event.ls.options.o = $global.options.o
devops.job.event.ls.options.O = $global.options.O
devops.job.event.ls.descr = \
List Job Events.\n\
Use option -c to list cluster-level Job events.

devops.job.event.delete = Delete Job Event
devops.job.event.delete.args = jobId,eventId
devops.job.event.delete.args.jobId = $devops.job.id
devops.job.event.delete.args.eventId = $devops.event.id
devops.job.event.delete.options = $devops.event.ls.options
devops.job.event.delete.options.n = $devops.space.idx
devops.job.event.delete.options.o = $global.options.o
devops.job.event.delete.options.O = $global.options.O
devops.job.event.delete.descr =\
Delete Event of Job with specified id.\n\
List after delete, if output options -o|-O are specified.

devops.job.event.schema = $devops.event.schema 
devops.job.event.help = $devops.event.help

# Job Pods

devops.job.pod = Operations on instances/replicas/pods of Job

devops.job.pod.ls = List instances/replicas/pods of Job
devops.job.pod.ls.args = jobId
devops.job.pod.ls.args.jobId = $devops.job.id
devops.job.pod.ls.args = deployId
devops.job.pod.ls.args.deployId = $devops.deployment.id
devops.job.pod.ls.options = q,status,props++,$devops.namespaced.get.options
devops.job.pod.ls.options.q = $global.options.q
devops.job.job.ls.options.status = Status
devops.job.pod.ls.options.props = any property of DeploymentFilter (deployment schema -f)
devops.job.pod.ls.options.n = $devops.space.idx
devops.job.pod.ls.options.o = $global.options.o
devops.job.pod.ls.options.O = $global.options.O
devops.deployment.pod.ls.descr = \
List instances/replicas/pods of Deployment.\n\

devops.job.logs.descr = \
List instances/replicas/pods of Job.\n\

devops.job.pod.kill = Kill instance/replica/pod of Job
devops.job.pod.kill.args = jobId,podId
devops.job.pod.kill.args.jobId = $devops.job.id
devops.job.pod.kill.args.podId = $devops.ipod.id
devops.job.pod.kill..descr = \
Kill instance/replica/pod of Job.\n\
If pod is not specified, the first pod is considered.\n\
Get/show Job after kill, if output options -o|-O are specified.

devops.job.pod.help = Show help on commands for Jobs Pods


# Job Mounts

devops.job.mount = Job Mounts operations

devops.job.mount.ls = List Mounts of Job
devops.job.mount.ls.args = deployId
devops.job.mount.ls.args.deployId = $devops.job.id
devops.job.mount.ls.options = $devops.namespaced.ls.options
devops.job.mount.ls.options.n = $devops.space.idx
devops.job.mount.ls.options.o = $global.options.o
devops.job.mount.ls.options.O = $global.options.O

devops.job.mount.get = Get Mount of Job
devops.job.mount.get.args = deployId,mountId
devops.job.mount.get.args.deployId = $devops.job.id
devops.job.mount.get.args.mountId = $devops.mount.id
devops.job.mount.get.options = $devops.namespaced.get.options
devops.job.mount.get.options.n = $devops.space.idx
devops.job.mount.get.options.o = $global.options.o
devops.job.mount.get.options.O = $global.options.O

devops.job.mount.add = Add Mount to Job
devops.job.mount.add.args = deployId,name,props++
devops.job.mount.add.args.deployId = $devops.job.id
devops.job.mount.add.args.name = $devops.mount.name
devops.job.mount.add.options = props++,$devops.namespaced.get.options
devops.job.mount.add.options.n = $devops.space.idx
devops.job.mount.add.options.o = $global.options.o
devops.job.mount.add.options.O = $global.options.O
devops.job.mount.add.options.props = Mount properties
devops.job.mount.add.descr =\
Add Mount to Job with specified properties.\n\
Get/show after create, if output options -o|-O are specified.

devops.job.mount.update = Update Mount of Job
devops.job.mount.update.args = deployId,mountId
devops.job.mount.update.args.deployId = $devops.job.id
devops.job.mount.update.args.mountId = $devops.mount.id
devops.job.mount.update.options = props++,$devops.job.get.options
devops.job.mount.update.options.props = $devops.job.mount.add.options.props
devops.job.mount.update.options.n = $devops.space.idx
devops.job.mount.update.options.o = $global.options.o
devops.job.mount.update.options.O = $global.options.O
devops.job.mount.update.descr =\
Update properties of Mount of Job with specified id.\n\
Get/show after update, if output options -o|-O are specified.

devops.job.mount.delete = Delete Mount of Job
devops.job.mount.delete.args = deployId,mountId
devops.job.mount.delete.args.deployId = $devops.job.id
devops.job.mount.delete.args.mountId = $devops.mount.id
devops.job.mount.delete.options = $devops.mount.ls.options
devops.job.mount.delete.options.n = $devops.space.idx
devops.job.mount.delete.options.o = $global.options.o
devops.job.mount.delete.options.O = $global.options.O
devops.job.mount.delete.descr =\
Delete Mount of Job with specified id.\n\
List after delete, if output options -o|-O are specified.

devops.job.mount.schema = Show attributes/properties of Mount
devops.job.mount.help = Show help on commands for Job Mounts


# Job Environment Variables

devops.job.env = Job Environment Variables operations

devops.job.env.ls = List Environment Variables of Job
devops.job.env.ls.args = deployId
devops.job.env.ls.args.deployId = $devops.job.id
devops.job.env.ls.options = $devops.namespaced.ls.options
devops.job.env.ls.options.n = $devops.space.idx
devops.job.env.ls.options.o = $global.options.o
devops.job.env.ls.options.O = $global.options.O

devops.job.env.get = Get Environment Variable of Job
devops.job.env.get.args = deployId,name
devops.job.env.get.args.deployId = $devops.job.id
devops.job.env.get.args.name = $devops.env.id
devops.job.env.get.options = $devops.namespaced.get.options
devops.job.env.get.options.n = $devops.space.idx
devops.job.env.get.options.o = $global.options.o
devops.job.env.get.options.O = $global.options.O

devops.job.env.add = Add Environment Variable to Job
devops.job.env.add.args = jobId,name
devops.job.env.add.args.jobId = $devops.job.id
devops.job.env.add.args.name = $devops.env.name
devops.job.env.add.options = value,configmap,secret,key,props++,$devops.namespaced.get.options
devops.job.env.add.options.value = Value of Environment Variable  
devops.job.env.add.options.configmap = Name of a configmap
devops.job.env.add.options.secret = Name of a secret
devops.job.env.add.options.key = Key in configmap or secret
devops.job.env.add.options.n = $devops.space.idx
devops.job.env.add.options.o = $global.options.o
devops.job.env.add.options.O = $global.options.O
devops.job.env.add.options.props = Environment Variable properties
devops.job.env.add.descr =\
Add Environment Variable to Job with specified host and properties.\n\
Get/show after create, if output options -o|-O are specified.

devops.job.env.update = Update Environment Variable of Job
devops.job.env.update.args = jobId,name
devops.job.env.update.args.jobId = $devops.job.id
devops.job.env.update.args.name = $devops.env.id
devops.job.env.update.options = $devops.job.env.add.options
devops.job.env.update.options.value = Value of Environment Variable  
devops.job.env.update.options.configmap = Name of a configmap
devops.job.env.update.options.secret = Name of a secret
devops.job.env.update.options.key = Key in configmap or secret
devops.job.env.update.options.props = $devops.job.env.add.options.props
devops.job.env.update.options.n = $devops.space.idx
devops.job.env.update.options.o = $global.options.o
devops.job.env.update.options.O = $global.options.O
devops.job.env.update.descr =\
Update properties of Environment Variable of Job with specified id.\n\
Get/show after update, if output options -o|-O are specified.

devops.job.env.delete = Delete Environment Variable of Job
devops.job.env.delete.args = deployId,name
devops.job.env.delete.args.deployId = $devops.job.id
devops.job.env.delete.args.name = $devops.env.id
devops.job.env.delete.options = $devops.env.ls.options
devops.job.env.delete.options.n = $devops.space.idx
devops.job.env.delete.options.o = $global.options.o
devops.job.env.delete.options.O = $global.options.O
devops.job.env.delete.descr =\
Delete Environment Variable of Job with specified id.\n\
List after delete, if output options -o|-O are specified.

devops.job.env.schema = Show attributes/properties of Environment Variable
devops.job.env.help = Show help on commands for Job Environment Variables

# Job Bindings


devops.job.binding = Job Bindings operations

devops.job.binding.ls = List Bindings of Job
devops.job.binding.ls.args = deployId
devops.job.binding.ls.args.deployId = $devops.job.id
devops.job.binding.ls.options = $devops.namespaced.ls.options
devops.job.binding.ls.options.n = $devops.space.idx
devops.job.binding.ls.options.o = $global.options.o
devops.job.binding.ls.options.O = $global.options.O

devops.job.binding.get = Get Binding of Job
devops.job.binding.get.args = deployId,bindingId
devops.job.binding.get.args.deployId = $devops.job.id
devops.job.binding.get.args.bindingId = $devops.binding.id
devops.job.binding.get.options = $devops.namespaced.get.options
devops.job.binding.get.options.n = $devops.space.idx
devops.job.binding.get.options.o = $global.options.o
devops.job.binding.get.options.O = $global.options.O

devops.job.binding.add = Add Binding to Job
devops.job.binding.add.args = deployId,selector+
devops.job.binding.add.args.deployId = $devops.job.id
devops.job.binding.add.args.selector = $devops.binding.selector
devops.job.binding.add.options = spec,auto,xn|space,x|external,props++,$devops.namespaced.get.options
devops.job.binding.add.options.auto = $devops.binding.options.auto
devops.job.binding.add.options.xn = $devops.binding.options.xn
devops.job.binding.add.options.x = $devops.binding.options.x
devops.job.binding.add.options.spec = $devops.binding.options.spec
devops.job.binding.add.options.n = $devops.space.idx
devops.job.binding.add.options.o = $global.options.o
devops.job.binding.add.options.O = $global.options.O
devops.job.binding.add.options.props = Binding properties
devops.job.binding.add.descr =\
Add Binding to Job with specified properties.\n\
$devops.binding.add.descr

devops.job.binding.update = Update Binding of Job
devops.job.binding.update.args = deployId,bindingId
devops.job.binding.update.args.deployId = $devops.job.id
devops.job.binding.update.args.bindingId = $devops.binding.id
devops.job.binding.update.options = selector,$devops.job.binding.add.options
devops.job.binding.update.options.selector =$devops.binding.selector
devops.job.binding.update.options.auto = $devops.binding.options.auto
devops.job.binding.update.options.xn = $devops.binding.options.xn
devops.job.binding.update.options.x = $devops.binding.options.x
devops.job.binding.update.options.spec = $devops.binding.options.spec
devops.job.binding.update.options.props = $devops.job.binding.add.options.props
devops.job.binding.update.options.n = $devops.space.idx
devops.job.binding.update.options.o = $global.options.o
devops.job.binding.update.options.O = $global.options.O
devops.job.binding.update.descr =\
Update properties of Binding of Job with specified id.\n\
$devops.binding.add.descr

devops.job.binding.delete = Delete Binding of Job
devops.job.binding.delete.args = deployId,bindingId
devops.job.binding.delete.args.deployId = $devops.job.id
devops.job.binding.delete.args.bindingId = $devops.binding.id
devops.job.binding.delete.options = $devops.binding.ls.options
devops.job.binding.delete.options.n = $devops.space.idx
devops.job.binding.delete.options.o = $global.options.o
devops.job.binding.delete.options.O = $global.options.O
devops.job.binding.delete.descr =\
Delete Binding of Job with specified id.\n\
List after delete, if output options -o|-O are specified.

devops.job.binding.schema = Show attributes/properties of Binding
devops.job.binding.help = Show help on commands for Job Bindings




## CronJob Commands

devops.cronjob = CronJob operations
devops.cronjob.id = Identifier of CronJob (name | id | uuid)

devops.cronjob.ls = List CronJobs in Space
devops.cronjob.ls.args = $global.ls.args
devops.cronjob.ls.args.q = $global.ls.args.q
devops.cronjob.ls.options = q,status,stack,props++,$devops.cronjob.get.options
devops.cronjob.ls.options.q = $global.options.q
devops.cronjob.ls.options.status = Status
devops.cronjob.ls.options.stack = Stack
devops.cronjob.ls.options.props = any property of CronJobFilter (cronjob schema -f)
devops.cronjob.ls.options.n = $devops.space.idx
devops.cronjob.ls.options.o = $global.options.o
devops.cronjob.ls.options.O = $global.options.O

devops.cronjob.get = Get Details of CronJob
devops.cronjob.get.args = cronjobId
devops.cronjob.get.args.cronjobId = $devops.cronjob.id
devops.cronjob.get.options = props++,$devops.namespaced.get.options
devops.cronjob.get.options.props = any property of CronJobOptions (cronjob schema -g)
devops.cronjob.get.options.n = $devops.space.idx
devops.cronjob.get.options.o = $global.options.o
devops.cronjob.get.options.O = $global.options.O

devops.cronjob.view = View CronJob dashboard in web browser
devops.cronjob.view.args = cronjobId
devops.cronjob.view.args.cronjobId = $devops.cronjob.id
devops.cronjob.view.options = n|ns
devops.cronjob.view.options.n = $devops.space.idx
devops.cronjob.view.descr =\
Requires environment where a default web-browser is configured and can be started/open.\n\
You need to login via the web-browser the first time to start a web session in Cloud Manager.

devops.cronjob.view = View CronJob dashboard in web browser
devops.cronjob.view.args = cronjobId
devops.cronjob.view.args.cronjobId = $devops.cronjob.id
devops.cronjob.view.options = n|ns
devops.cronjob.view.options.n = $devops.space.idx
devops.cronjob.view.descr =\
Requires environment where a default web-browser is configured and can be started/open.\n\
You need to login via the web-browser the first time to start a web session in Cloud Manager.

devops.cronjob.create = Create CronJob
devops.cronjob.create.args = cronjobId
devops.cronjob.create.args.cronjobId = $devops.cronjob.id
devops.cronjob.create.options = schedule,image,env,mounts|mount,props++,track,$devops.namespaced.get.options
devops.cronjob.create.options.schedule = Schedule to run CronJob
devops.cronjob.create.options.image = $devops.run.options.image
devops.cronjob.create.options.env = $devops.run.options.env
devops.cronjob.create.options.mounts = $devops.run.options.mounts
devops.cronjob.create.options.props = CronJob properties (cronjob schema)
devops.cronjob.create.options.n = $devops.space.idx
devops.cronjob.create.options.track = $devops.options.track
devops.cronjob.create.options.o = $global.options.o
devops.cronjob.create.options.O = $global.options.O
devops.cronjob.create.descr =\
Create CronJob with specified name and properties.\n\
$devops.run.descr


devops.cronjob.update = Update CronJob
devops.cronjob.update.args = cronjobId
devops.cronjob.update.args.cronjobId = $devops.cronjob.id
devops.cronjob.update.options = $devops.cronjob.update.options
devops.cronjob.update.options.image = $devops.run.options.image
devops.cronjob.update.options.env = $devops.run.options.env
devops.cronjob.update.options.mounts = $devops.run.options.mounts
devops.cronjob.update.options.props = $devops.cronjob.create.options.props
devops.cronjob.update.options.n = $devops.space.idx
devops.cronjob.update.options.track = $devops.options.track
devops.cronjob.update.options.o = $global.options.o
devops.cronjob.update.options.O = $global.options.O
devops.cronjob.update.descr =\
Update properties of CronJob with specified id.\n\
$devops.run.descr

devops.cronjob.delete = Delete CronJob
devops.cronjob.delete.args = cronjobId
devops.cronjob.delete.args.cronjobId = $devops.cronjob.id
devops.cronjob.delete.options = $devops.namespaced.get.options
devops.cronjob.delete.options.n = $devops.space.idx
devops.cronjob.delete.options.o = $global.options.o
devops.cronjob.delete.options.O = $global.options.O
devops.cronjob.delete.descr = \
Update properties of CronJob with specified id.\n\
List CronJobs in same Space after delete, if output options -o|-O are specified.

devops.cronjob.resources = Scale resources of Cronjob
devops.cronjob.resources.args = cronjobId
devops.cronjob.resources.args.cronjobId = $devops.cronjob.id
devops.cronjob.resources.options = m|mem,d|disk|storage,$devops.cronjob.get.options
devops.cronjob.resources.options.m = Memory size (units Gi|G|Mi|M)
devops.cronjob.resources.options.d = Ephemeral Disk/Storage size (units Gi|G)
devops.cronjob.resources.options.n = $devops.space.idx
devops.cronjob.resources.options.o = $global.options.o
devops.cronjob.resources.options.O = $global.options.O
devops.cronjob.resources.descr = \
Scale memory and ephemeral storage resources of Cronjob.\n\
New pods are created with new resource settings.\n\
Get/show Cronjob after update, if output options -o|-O are specified.

devops.cronjob.start = Start a Cronjob
devops.cronjob.start.args = cronjobId
devops.cronjob.start.args.cronjobId = $devops.cronjob.id
devops.cronjob.start.args = cronjobId
devops.cronjob.start.args.cronjobId = $devops.cronjob.id
devops.cronjob.start.options =  $devops.cronjob.get.options
devops.cronjob.start.options.n = $devops.space.idx
devops.cronjob.start.options.o = $global.options.o
devops.cronjob.start.options.O = $global.options.O
devops.cronjob.start.descr = \
Start a Cronjob.\n\
Get/show Cronjob after start, if output options -o|-O are specified.

devops.cronjob.stop = Stop a Cronjob
devops.cronjob.stop.args = cronjobId
devops.cronjob.stop.args.cronjobId = $devops.cronjob.id
devops.cronjob.stop.args = cronjobId
devops.cronjob.stop.args.cronjobId = $devops.cronjob.id
devops.cronjob.stop.options =  $devops.cronjob.get.options
devops.cronjob.stop.options.n = $devops.space.idx
devops.cronjob.stop.options.o = $global.options.o
devops.cronjob.stop.options.O = $global.options.O
devops.cronjob.stop.descr = \
Stop a Cronjob.\n\
Get/show Cronjob after stop, if output options -o|-O are specified.

devops.cronjob.suspend = Suspend a Cronjob
devops.cronjob.suspend.args = cronjobId
devops.cronjob.suspend.args.cronjobId = $devops.cronjob.id
devops.cronjob.suspend.args = cronjobId
devops.cronjob.suspend.args.cronjobId = $devops.cronjob.id
devops.cronjob.suspend.options =  $devops.cronjob.get.options
devops.cronjob.suspend.options.n = $devops.space.idx
devops.cronjob.suspend.options.o = $global.options.o
devops.cronjob.suspend.options.O = $global.options.O
devops.cronjob.suspend.descr = \
Stop a Cronjob.\n\
Get/show Cronjob after suspend, if output options -o|-O are specified.

devops.cronjob.restart = Restart a Cronjob
devops.cronjob.restart.args = cronjobId
devops.cronjob.restart.args.cronjobId = $devops.cronjob.id
devops.cronjob.restart.args = cronjobId
devops.cronjob.restart.args.cronjobId = $devops.cronjob.id
devops.cronjob.restart.options =  $devops.cronjob.get.options
devops.cronjob.restart.options.n = $devops.space.idx
devops.cronjob.restart.options.o = $global.options.o
devops.cronjob.restart.options.O = $global.options.O
devops.cronjob.restart.descr = \
Stop a Cronjob.\n\
Get/show Cronjob after restart, if output options -o|-O are specified.

devops.cronjob.sync = Synchronize Cronjob state/details from the cluster
devops.cronjob.sync.args = cronjobId
devops.cronjob.sync.args.cronjobId = $devops.cronjob.id
devops.cronjob.sync.args = cronjobId
devops.cronjob.sync.args.cronjobId = $devops.cronjob.id
devops.cronjob.sync.options =  $devops.cronjob.get.options
devops.cronjob.sync.options.n = $devops.space.idx
devops.cronjob.sync.options.o = $global.options.o
devops.cronjob.sync.options.O = $global.options.O
devops.cronjob.sync.descr = \
Synchronize Cronjob state/details from the cluster.\n\
Get/show Cronjob after sync, if output options -o|-O are specified.


devops.cronjob.attach = Attach a Cronjob from the cluster
devops.cronjob.attach.args = cronjobId
devops.cronjob.attach.args.cronjobId = $devops.cronjob.id
devops.cronjob.attach.options =  $devops.cronjob.get.options
devops.cronjob.attach.options.n = $devops.space.idx
devops.cronjob.attach.options.o = $global.options.o
devops.cronjob.attach.options.O = $global.options.O
devops.cronjob.attach.descr = \
Attach a Cronjob from the cluster.\n\
Get/show Cronjob after attach, if output options -o|-O are specified.


devops.cronjob.exec = Execute command on instance/replica/pod of Cronjob
devops.cronjob.exec.args = cronjobId,podId
devops.cronjob.exec.args.cronjobId = $devops.cronjob.id
devops.cronjob.exec.args.podId = $devops.ipod.id
devops.cronjob.exec.options =  $devops.cronjob.get.options
devops.cronjob.exec.options.n = $devops.space.idx
devops.cronjob.exec.options.o = $global.options.o
devops.cronjob.exec.options.O = $global.options.O
devops.cronjob.exec.descr = \
Execute command on instance/replica/pod of Cronjob.\n\
If pod is not specified, the first pod is considered.\n\
Get/show Cronjob after attach, if output options -o|-O are specified.

devops.cronjob.logs = View logs of instance/replica/pod of Cronjob
devops.cronjob.logs.args = cronjobId,podId
devops.cronjob.logs.args.cronjobId = $devops.cronjob.id
devops.cronjob.logs.args.podId = $devops.ipod.id
devops.cronjob.logs.options =  $devops.cronjob.get.options
devops.cronjob.logs.options.n = $devops.space.idx
devops.cronjob.logs.options.o = $global.options.o
devops.cronjob.logs.options.O = $global.options.O
devops.cronjob.logs.descr = \
View logs of instance/replica/pod of Cronjob.\n\
If pod is not specified, the first pod is considered.\n\
Get/show Cronjob after attach, if output options -o|-O are specified.

devops.cronjob.schema = Show attributes/properties of Cronjob
devops.cronjob.schema.options = f,g
devops.cronjob.schema.options.f = Show attributes/properties of CronJobFilter
devops.cronjob.schema.options.g = Show attributes/properties of CronJobOptions

devops.cronjob.help = Show help on commands for Cronjobs

# CronJob Events
devops.cronjob.event = Operations on CronJob Events

devops.cronjob.event.ls = List CronJob Events
devops.cronjob.event.ls.args = cronjobId
devops.cronjob.event.ls.args.cronjobId = $devops.cronjob.id
devops.cronjob.event.ls.options = $devops.event.ls.options
devops.job.event.ls.options.c = $devops.event.ls.options.c
devops.cronjob.event.ls.options.props = $devops.event.ls.options.props
devops.cronjob.event.ls.options.n = $devops.space.idx
devops.cronjob.event.ls.options.o = $global.options.o
devops.cronjob.event.ls.options.O = $global.options.O
devops.cronjob.event.ls.descr = \
List CronJob Events.\n\
Use option -c to list cluster-level CronJob events.

devops.cronjob.event.delete = Delete CronJob Event
devops.cronjob.event.delete.args = cronjobId,eventId
devops.cronjob.event.delete.args.cronjobId = $devops.cronjob.id
devops.cronjob.event.delete.args.eventId = $devops.event.id
devops.cronjob.event.delete.options = $devops.event.ls.options
devops.cronjob.event.delete.options.n = $devops.space.idx
devops.cronjob.event.delete.options.o = $global.options.o
devops.cronjob.event.delete.options.O = $global.options.O
devops.cronjob.event.delete.descr =\
Delete Event of CronJob with specified id.\n\
List after delete, if output options -o|-O are specified.

devops.cronjob.event.schema = $devops.event.schema 
devops.cronjob.event.help = $devops.event.help

# CrionJob Job

devops.cronjob.job = Operations on instances/replicas/jobs of Cronjob

devops.cronjob.job.ls = List Job instances for CronJob
devops.cronjob.job.ls.args = cronjobId
devops.cronjob.job.ls.args.cronjobId = $devops.cronjob.id
devops.cronjob.logs.descr = \
List Job instances of Cronjob.\n\

devops.cronjob.job.kill = Kill instance/replica/job of Cronjob
devops.cronjob.job.kill.args = cronjobId,jobId
devops.cronjob.job.kill.args.cronjobId = $devops.cronjob.id
devops.cronjob.job.kill.args.jobId = $devops.ijob.id
devops.cronjob.job.kill..descr = \
Kill instance/replica/job of Cronjob.\n\
If job is not specified, the first job is considered.\n\
Get/show Cronjob after kill, if output options -o|-O are specified.

devops.cronjob.job.help = Show help on commands for Cronjobs Pods



## CronJob Mount
devops.cronjob.mount = CronJob Mounts operations

devops.cronjob.mount.ls = List Mounts of CronJob
devops.cronjob.mount.ls.args = deployId
devops.cronjob.mount.ls.args.deployId = $devops.cronjob.id
devops.cronjob.mount.ls.options = $devops.namespaced.ls.options
devops.cronjob.mount.ls.options.n = $devops.space.idx
devops.cronjob.mount.ls.options.o = $global.options.o
devops.cronjob.mount.ls.options.O = $global.options.O

devops.cronjob.mount.get = Get Mount of CronJob
devops.cronjob.mount.get.args = deployId,mountId
devops.cronjob.mount.get.args.deployId = $devops.cronjob.id
devops.cronjob.mount.get.args.mountId = $devops.mount.id
devops.cronjob.mount.get.options = $devops.namespaced.get.options
devops.cronjob.mount.get.options.n = $devops.space.idx
devops.cronjob.mount.get.options.o = $global.options.o
devops.cronjob.mount.get.options.O = $global.options.O

devops.cronjob.mount.add = Add Mount to CronJob
devops.cronjob.mount.add.args = deployId,name,props++
devops.cronjob.mount.add.args.deployId = $devops.cronjob.id
devops.cronjob.mount.add.args.name = $devops.mount.name
devops.cronjob.mount.add.options = props++,$devops.namespaced.get.options
devops.cronjob.mount.add.options.n = $devops.space.idx
devops.cronjob.mount.add.options.o = $global.options.o
devops.cronjob.mount.add.options.O = $global.options.O
devops.cronjob.mount.add.options.props = Mount properties
devops.cronjob.mount.add.descr =\
Add Mount to CronJob with specified properties.\n\
Get/show after create, if output options -o|-O are specified.

devops.cronjob.mount.update = Update Mount of CronJob
devops.cronjob.mount.update.descr =\
Update properties of Mount of CronJob with specified id.\n\
Get/show after update, if output options -o|-O are specified.
devops.cronjob.mount.update.args = deployId,mountId
devops.cronjob.mount.update.args.deployId = $devops.cronjob.id
devops.cronjob.mount.update.args.mountId = $devops.mount.id
devops.cronjob.mount.update.options = props++,$devops.cronjob.get.options
devops.cronjob.mount.update.options.props = $devops.cronjob.mount.add.options.props
devops.cronjob.mount.update.options.n = $devops.space.idx
devops.cronjob.mount.update.options.o = $global.options.o
devops.cronjob.mount.update.options.O = $global.options.O

devops.cronjob.mount.delete = Delete Mount of CronJob
devops.cronjob.mount.delete.args = deployId,mountId
devops.cronjob.mount.delete.args.deployId = $devops.cronjob.id
devops.cronjob.mount.delete.args.mountId = $devops.mount.id
devops.cronjob.mount.delete.options = $devops.mount.ls.options
devops.cronjob.mount.delete.options.n = $devops.space.idx
devops.cronjob.mount.delete.options.o = $global.options.o
devops.cronjob.mount.delete.options.O = $global.options.O
devops.cronjob.mount.delete.descr =\
Delete Mount of CronJob with specified id.\n\
List after delete, if output options -o|-O are specified.

devops.cronjob.mount.schema = Show attributes/properties of Mount
devops.cronjob.mount.help = Show help on commands for CronJob Mounts


# CronJob Environment Variables

devops.cronjob.env = CronJob Environment Variables operations

devops.cronjob.env.ls = List Environment Variables of CronJob
devops.cronjob.env.ls.args = deployId
devops.cronjob.env.ls.args.deployId = $devops.cronjob.id
devops.cronjob.env.ls.options = $devops.namespaced.ls.options
devops.cronjob.env.ls.options.n = $devops.space.idx
devops.cronjob.env.ls.options.o = $global.options.o
devops.cronjob.env.ls.options.O = $global.options.O

devops.cronjob.env.get = Get Environment Variable of CronJob
devops.cronjob.env.get.args = deployId,name
devops.cronjob.env.get.args.deployId = $devops.cronjob.id
devops.cronjob.env.get.args.name = $devops.env.id
devops.cronjob.env.get.options = $devops.namespaced.get.options
devops.cronjob.env.get.options.n = $devops.space.idx
devops.cronjob.env.get.options.o = $global.options.o
devops.cronjob.env.get.options.O = $global.options.O

devops.cronjob.env.add = Add Environment Variable to CronJob
devops.cronjob.env.add.args = cronjobId,name
devops.cronjob.env.add.args.cronjobId = $devops.cronjob.id
devops.cronjob.env.add.args.name = $devops.env.name
devops.cronjob.env.add.options = value,configmap,secret,key,props++,$devops.namespaced.get.options
devops.cronjob.env.add.options.value = Value of Environment Variable  
devops.cronjob.env.add.options.configmap = Name of a configmap
devops.cronjob.env.add.options.secret = Name of a secret
devops.cronjob.env.add.options.key = Key in configmap or secret
devops.cronjob.env.add.options.n = $devops.space.idx
devops.cronjob.env.add.options.o = $global.options.o
devops.cronjob.env.add.options.O = $global.options.O
devops.cronjob.env.add.options.props = Environment Variable properties
devops.cronjob.env.add.descr =\
Add Environment Variable to CronJob with specified host and properties.\n\
Get/show after create, if output options -o|-O are specified.

devops.cronjob.env.update = Update Environment Variable of CronJob
devops.cronjob.env.update.args = cronjobId,name
devops.cronjob.env.update.args.cronjobId = $devops.cronjob.id
devops.cronjob.env.update.args.name = $devops.env.id
devops.cronjob.env.update.options = $devops.cronjob.env.add.options
devops.cronjob.env.update.options.value = Value of Environment Variable  
devops.cronjob.env.update.options.configmap = Name of a configmap
devops.cronjob.env.update.options.secret = Name of a secret
devops.cronjob.env.update.options.key = Key in configmap or secret
devops.cronjob.env.update.options.props = $devops.cronjob.env.add.options.props
devops.cronjob.env.update.options.n = $devops.space.idx
devops.cronjob.env.update.options.o = $global.options.o
devops.cronjob.env.update.options.O = $global.options.O
devops.cronjob.env.update.descr =\
Update properties of Environment Variable of CronJob with specified id.\n\
Get/show after update, if output options -o|-O are specified.

devops.cronjob.env.delete = Delete Environment Variable of CronJob
devops.cronjob.env.delete.args = deployId,name
devops.cronjob.env.delete.args.deployId = $devops.cronjob.id
devops.cronjob.env.delete.args.name = $devops.env.id
devops.cronjob.env.delete.options = $devops.env.ls.options
devops.cronjob.env.delete.options.n = $devops.space.idx
devops.cronjob.env.delete.options.o = $global.options.o
devops.cronjob.env.delete.options.O = $global.options.O
devops.cronjob.env.delete.descr =\
Delete Environment Variable of CronJob with specified id.\n\
List after delete, if output options -o|-O are specified.

devops.cronjob.env.schema = Show attributes/properties of Environment Variable
devops.cronjob.env.help = Show help on commands for CronJob Environment Variables

# CronJob Bindings

devops.cronjob.binding = CronJob Bindings operations

devops.cronjob.binding.ls = List Bindings of CronJob
devops.cronjob.binding.ls.args = deployId
devops.cronjob.binding.ls.args.deployId = $devops.cronjob.id
devops.cronjob.binding.ls.options = $devops.namespaced.ls.options
devops.cronjob.binding.ls.options.n = $devops.space.idx
devops.cronjob.binding.ls.options.o = $global.options.o
devops.cronjob.binding.ls.options.O = $global.options.O

devops.cronjob.binding.get = Get Binding of CronJob
devops.cronjob.binding.get.args = deployId,bindingId
devops.cronjob.binding.get.args.deployId = $devops.cronjob.id
devops.cronjob.binding.get.args.bindingId = $devops.binding.id
devops.cronjob.binding.get.options = $devops.namespaced.get.options
devops.cronjob.binding.get.options.n = $devops.space.idx
devops.cronjob.binding.get.options.o = $global.options.o
devops.cronjob.binding.get.options.O = $global.options.O

devops.cronjob.binding.add = Add Binding to CronJob
devops.cronjob.binding.add.args = deployId,selector+
devops.cronjob.binding.add.args.deployId = $devops.cronjob.id
devops.cronjob.binding.add.args.selector = $devops.binding.selector
devops.cronjob.binding.add.options = props++
devops.cronjob.binding.add.options = spec,auto,xn|space,x|external,props++,$devops.namespaced.get.options
devops.cronjob.binding.add.options.auto = $devops.binding.options.auto
devops.cronjob.binding.add.options.xn = $devops.binding.options.xn
devops.cronjob.binding.add.options.x = $devops.binding.options.x
devops.cronjob.binding.add.options.spec = $devops.binding.options.spec
devops.cronjob.binding.add.options.n = $devops.space.idx
devops.cronjob.binding.add.options.o = $global.options.o
devops.cronjob.binding.add.options.O = $global.options.O
devops.cronjob.binding.add.options.props = Binding properties
devops.cronjob.binding.add.descr =\
Add Binding to CronJob with specified properties.\n\
$devops.binding.add.descr

devops.cronjob.binding.update = Update Binding of CronJob
devops.cronjob.binding.update.args = deployId,bindingId
devops.cronjob.binding.update.args.deployId = $devops.cronjob.id
devops.cronjob.binding.update.args.bindingId = $devops.binding.id
devops.cronjob.binding.update.options = selector,$devops.cronjob.binding.add.options
devops.cronjob.binding.update.options.selector =$devops.binding.selector
devops.cronjob.binding.update.options.auto = $devops.binding.options.auto
devops.cronjob.binding.update.options.xn = $devops.binding.options.xn
devops.cronjob.binding.update.options.x = $devops.binding.options.x
devops.cronjob.binding.update.options.spec = $devops.binding.options.spec
devops.cronjob.binding.update.options.n = $devops.space.idx
devops.cronjob.binding.update.options.o = $global.options.o
devops.cronjob.binding.update.options.O = $global.options.O
devops.cronjob.binding.update.options.props = $devops.cronjob.binding.add.options.props
devops.cronjob.binding.update.options.n = $devops.space.idx
devops.cronjob.binding.update.options.o = $global.options.o
devops.cronjob.binding.update.options.O = $global.options.O
devops.cronjob.binding.update.descr =\
Update properties of Binding of CronJob with specified id.\n\
$devops.binding.add.descr

devops.cronjob.binding.delete = Delete Binding of CronJob
devops.cronjob.binding.delete.args = deployId,bindingId
devops.cronjob.binding.delete.args.deployId = $devops.cronjob.id
devops.cronjob.binding.delete.args.bindingId = $devops.binding.id
devops.cronjob.binding.delete.options = $devops.binding.ls.options
devops.cronjob.binding.delete.options.n = $devops.space.idx
devops.cronjob.binding.delete.options.o = $global.options.o
devops.cronjob.binding.delete.options.O = $global.options.O
devops.cronjob.binding.delete.descr =\
Delete Binding of CronJob with specified id.\n\
List after delete, if output options -o|-O are specified.

devops.cronjob.binding.schema = Show attributes/properties of Binding
devops.cronjob.binding.help = Show help on commands for CronJob Bindings

## Domain Commands

devops.domain = Domain operations

devops.domain.id = Identifier of Domain (name | url | id | uuid)
devops.domain.idx = Identifier of Domain (name | url | id | uuid). Defaults to current Domain, if not specified.

devops.domain.ls = List Domains
devops.domain.ls.args = $global.ls.args
devops.domain.ls.args.q = $global.ls.args.q
devops.domain.ls.options = q,tls,props++,$devops.domain.get.options
devops.domain.ls.options.q = $global.options.q
devops.domain.ls.options.tls = true/false filter for TLS property
devops.domain.ls.options.props = any property of DomainFilter (domain schema -f)
devops.domain.ls.options.o = $global.options.o
devops.domain.ls.options.O = $global.options.O
devops.domain.ls.descr = \
List Domains

devops.domain.get = Get Details of Domain
devops.domain.get.args = domainId
devops.domain.get.args.domainId = $devops.domain.id
devops.domain.get.options = props++,$global.ls.options
devops.domain.get.options.props = any property of DomainOptions (domain schema -g)
devops.domain.get.options.o = $global.options.o
devops.domain.get.options.O = $global.options.O
devops.domain.get.descr = \
Get Details of Domain

devops.domain.view = View Domain dashboard in web browser
devops.domain.view.args = domainId+
devops.domain.view.args.domainId = $devops.domain.id
devops.domain.view.options = n|ns
devops.domain.view.options.n = $devops.space.idx
devops.domain.view.descr =\
If domainId is not specified, defaults to current Domain if any.\n\
Requires environment where a default web-browser is configured and can be started/open.\n\
You need to login via the web-browser the first time to start a web session in Cloud Manager.

devops.domain.create = Create Domain
devops.domain.create.args = domainId
devops.domain.create.args.domainId = $devops.domain.id
devops.domain.create.options = props++,$devops.domain.get.options
devops.domain.create.options.props = Domain properties (domain schema)
devops.domain.create.options.o = $global.options.o
devops.domain.create.options.O = $global.options.O
devops.domain.create.descr = \
Create Domain with specified name and properties.\n\
Get/show after creation, if output options -o|-O are specified.

devops.domain.update = Update Domain
devops.domain.update.args = domainId
devops.domain.update.args.domainId = $devops.domain.id
devops.domain.update.options = props++,$devops.domain.get.options
devops.domain.update.options.props = $devops.domain.create.options.props 
devops.domain.update.options.o = $global.options.o
devops.domain.update.options.O = $global.options.O
devops.domain.update.descr = \
Update properties of Domain with specified id.\n\
Get/show Domain after update, if output options -o|-O are specified.

devops.domain.delete = Delete Domain
devops.domain.delete.args = domainId
devops.domain.delete.args.domainId = $devops.domain.id
devops.domain.delete.options = $general.delete.options
devops.domain.delete.options.o = $global.options.o
devops.domain.delete.options.O = $global.options.O
devops.domain.delete.descr = \
Delete Domain with specified id.\n\
List Domains after delete, if output options -o|-O are specified.

devops.domain.set = Set current Domain
devops.domain.set.args = domainId
devops.domain.set.args.domainId = $devops.domain.id
devops.domain.set.options = o
devops.domain.set.options.o = $devops.options.pwd
devops.domain.set.descr = \
Set current Domain.\n\
Created Routes will use this Domain if not specified.

devops.domain.unset = Unset current Domain
devops.domain.unset.descr = \
Unset current Domain.

devops.domain.schema = Show attributes/properties of Domain
devops.domain.schema.options = f,g
devops.domain.schema.options.f = Show attributes/properties of DomainFilter
devops.domain.schema.options.g = Show attributes/properties of DomainOptions

devops.domain.help = Show help on commands for Domain

devops.domain.help = Show help on commands for Domain



## Registry

devops.registry = Registry operations

devops.registry.id = Identifier of Registry (name | url | id | uuid)
devops.registry.idx = Identifier of Registry (name | url | id | uuid). Defaults to current Registry, if not specified.

devops.registry.ls = List Registries
devops.registry.ls.args = $global.ls.args
devops.registry.ls.args.q = $global.ls.args.q
devops.registry.ls.options = q,props++,$devops.registry.get.options
devops.registry.ls.options.q = $global.options.q
devops.registry.ls.options.props = any property of RegistryFilter (registry schema -f)
devops.registry.ls.options.o = $global.options.o
devops.registry.ls.options.O = $global.options.O
devops.registry.ls.descr = \
List Registries\n\
Each private Registry needs to be configured with the access credentials.\n\
At least one registry need to be created to push images after a CICD build.\n\
If no Registry is defined, images can pull can only from public registries.

devops.registry.get = Get Details of Registry
devops.registry.get.args = registryId
devops.registry.get.args.registryId = $devops.registry.id
devops.registry.get.options = props++,$global.get.options
devops.registry.get.options.props = any property of RegistryOptions (registry schema -g)
devops.registry.get.options.o = $global.options.o
devops.registry.get.options.O = $global.options.O
devops.registry.get.descr = \
Get Details of Registry\n\
Each private Registry needs to be configured with the access credentials.\n\
At least one registry need to be created to push images after a CICD build.\n\
If no Registry is defined, images can pull can only from public registries.

devops.registry.view = View Registry dashboard in web browser
devops.registry.view.args = registryId+
devops.registry.view.args.registryId = $devops.registry.id
devops.registry.view.descr =\
If registryId is not specified, defaults to current Registry if any.\n\
Requires environment where a default web-browser is configured and can be started/open.\n\
You need to login via the web-browser the first time to start a web session in Cloud Manager.

devops.registry.create = Create Registry
devops.registry.create.args = registryId
devops.registry.create.args.registryId = $devops.registry.id
devops.registry.create.options = props++,$devops.registry.get.options
devops.registry.create.options.props = Registry properties (registry schema)
devops.registry.create.options.o = $global.options.o
devops.registry.create.options.O = $global.options.O
devops.registry.create.descr = \
Create Registry with specified name and properties.\n\
Get/show after creation, if output options -o|-O are specified.

devops.registry.update = Update Registry
devops.registry.update.args = registryId
devops.registry.update.args.registryId = $devops.registry.id
devops.registry.update.options = props++,$devops.registry.get.options
devops.registry.update.options.props = $devops.registry.create.options.props
devops.registry.update.options.o = $global.options.o
devops.registry.update.options.O = $global.options.O
devops.registry.update.descr = \
Update properties of Registry with specified id.\n\
Get/show Registry after update, if output options -o|-O are specified.

devops.registry.delete = Delete Registry
devops.registry.delete.args = registryId
devops.registry.delete.args.registryId = $devops.registry.id
devops.registry.delete.options = $general.delete.options
devops.registry.delete.options.o = $global.options.o
devops.registry.delete.options.O = $global.options.O
devops.registry.delete.descr = \
Delete Registry with specified id.\n\
List Registries after delete, if output options -o|-O are specified.

devops.registry.set = Set current Registry
devops.registry.set.args = registryId
devops.registry.set.args.registryId = $devops.registry.id
devops.registry.set.options = o
devops.registry.set.options.o = $devops.options.pwd
devops.registry.set.descr = \
Set current Registry.\n\
Created Deployments/Jobs/CronJobs will use this Registry if not specified.

devops.registry.unset = Unset current Registry
devops.registry.unset.descr = \
Unset current Registry.

devops.registry.schema = Show attributes/properties of Domain
devops.registry.schema.options = f,g
devops.registry.schema.options.f = Show attributes/properties of RegistryFilter
devops.registry.schema.options.g = Show attributes/properties of RegistryOptions

devops.registry.help = Show help on commands for Domain


## VCS

devops.vcs = Git VCS operations

devops.vcs.id = Identifier of Git Vcs (name | url | id | uuid)
devops.vcs.idx = Identifier of Git Vcs (name | url | id | uuid). Defaults to current Git Vcs, if not specified.

devops.vcs.get.options=$global.get.options
devops.vcs.ls.options=$global.ls.options

devops.vcs.ls = List Git Vcs
devops.vcs.ls.args = $global.ls.args
devops.vcs.ls.args.q = $global.ls.args.q
devops.vcs.ls.options = q,props++,$devops.vcs.get.options
devops.vcs.ls.options.q = $global.options.q
devops.vcs.ls.options.props = any property of VcsFilter (vcs schema -f)
devops.vcs.ls.options.o = $global.options.o
devops.vcs.ls.options.O = $global.options.O
devops.vcs.ls.descr = \
List Git Vcs

devops.vcs.get = Get Details of Git Vcs
devops.vcs.get.args = vcsId
devops.vcs.get.args.vcsId = $devops.vcs.id
devops.vcs.get.options = props++,$global.get.options
devops.vcs.get.options.props = any property of VcsOptions (vcs schema -g)
devops.vcs.get.options.o = $global.options.o
devops.vcs.get.options.O = $global.options.O
devops.vcs.get.descr = \
Get Details of Git Vcs

devops.vcs.view = View Git Vcs dashboard in web browser
devops.vcs.view.args = vcsId+
devops.vcs.view.args.vcsId = $devops.vcs.id
devops.vcs.view.descr =\
If vcsId is not specified, defaults to current VCS if any.\n\
Requires environment where a default web-browser is configured and can be started/open.\n\
You need to login via the web-browser the first time to start a web session in Cloud Manager.

devops.vcs.create = Create Git Vcs
devops.vcs.create.args = vcsId
devops.vcs.create.args.vcsId = $devops.vcs.id
devops.vcs.create.options = props++,$devops.vcs.get.options
devops.vcs.create.options.props = Git Vcs properties (vcs schema)
devops.vcs.create.options.o = $global.options.o
devops.vcs.create.options.O = $global.options.O
devops.vcs.create.descr = \
Create Git Vcs with specified name and properties.\n\
Get/show after creation, if output options -o|-O are specified.

devops.vcs.update = Update Git Vcs
devops.vcs.update.args = vcsId
devops.vcs.update.args.vcsId = $devops.vcs.id
devops.vcs.update.options = props++,$devops.vcs.get.options
devops.vcs.update.options.props = $devops.vcs.create.options.props
devops.vcs.update.options.o = $global.options.o
devops.vcs.update.options.O = $global.options.O
devops.vcs.update.descr = \
Update properties of Git Vcs with specified id.\n\
Get/show Git Vcs after update, if output options -o|-O are specified.

devops.vcs.delete = Delete Git Vcs
devops.vcs.delete.args = vcsId
devops.vcs.delete.options = $general.delete.options
devops.vcs.delete.args.vcsId = $devops.vcs.id
devops.vcs.delete.options.o = $global.options.o
devops.vcs.delete.options.O = $global.options.O
devops.vcs.delete.descr = \
Delete Git Vcs with specified id.\n\
List Git Vcs after delete, if output options -o|-O are specified.

devops.vcs.set = Set current Git Vcs
devops.vcs.set.args = vcsId
devops.vcs.set.args.vcsId = $devops.vcs.id
devops.vcs.set.options = o
devops.vcs.set.options.o = $devops.options.pwd
devops.vcs.set.descr = \
Set current Git Vcs.\n\
Created Deployments/Jobs/CronJobs will use this Git Vcs if not specified.

devops.vcs.unset = Unset current Git Vcs
devops.vcs.unset.descr = \
Unset current Git Vcs.

devops.vcs.schema = Show attributes/properties of Vcs
devops.vcs.schema.options = f,g
devops.vcs.schema.options.f = Show attributes/properties of VcsFilter
devops.vcs.schema.options.g = Show attributes/properties of VcsOptions

devops.vcs.help = Show help on commands for Domain


## Catalog

devops.catalog = Catalog operations

devops.catalog.id = Identifier of Catalog (name | url | id | uuid)
devops.catalog.idx = Identifier of Catalog (name | url | id | uuid). Defaults to current Catalog, if not specified.

devops.catalog.get.options=$global.get.options
devops.catalog.ls.options=$global.ls.options

devops.catalog.ls = List Catalogs
devops.catalog.ls.args = $global.ls.args
devops.catalog.ls.args.q = $global.ls.args.q
devops.catalog.ls.options = q,props++,$devops.catalog.get.options
devops.catalog.ls.options.q = $global.options.q
devops.catalog.ls.options.props = any property of CatalogFilter (catalog schema -f)
devops.catalog.ls.options.o = $global.options.o
devops.catalog.ls.options.O = $global.options.O
devops.catalog.ls.descr = \
List Catalogs

devops.catalog.get = Get Details of Catalog
devops.catalog.get.args = catalogId
devops.catalog.get.args.catalogId = $devops.catalog.id
devops.catalog.get.options = props++,$global.get.options
devops.catalog.get.options.props = any property of CatalogOptions (catalog schema -g)
devops.catalog.get.options.o = $global.options.o
devops.catalog.get.options.O = $global.options.O
devops.catalog.get.descr = \
Get Details of Catalog

devops.catalog.view = View Catalog dashboard in web browser
devops.catalog.view.args = catalogId+
devops.catalog.view.args.catalogId = $devops.catalog.id
devops.catalog.view.descr =\
If catalogId is not specified, defaults to current Catalog if any.\n\
Requires environment where a default web-browser is configured and can be started/open.\n\
You need to login via the web-browser the first time to start a web session in Cloud Manager.

devops.catalog.create = Create Catalog
devops.catalog.create.args = catalogId
devops.catalog.create.args.catalogId = $devops.catalog.id
devops.catalog.create.options = props++,$devops.catalog.get.options
devops.catalog.create.options.props = Catalog properties (catalog schema)
devops.catalog.create.options.o = $global.options.o
devops.catalog.create.options.O = $global.options.O
devops.catalog.create.descr = \
Create Catalog with specified name and properties.\n\
Get/show after creation, if output options -o|-O are specified.

devops.catalog.update = Update Catalog
devops.catalog.update.args = catalogId
devops.catalog.update.args.catalogId = $devops.catalog.id
devops.catalog.update.options = $devops.catalog.create.options
devops.catalog.update.options.props = $devops.catalog.create.options.props
devops.catalog.update.options.o = $global.options.o
devops.catalog.update.options.O = $global.options.O
devops.catalog.update.descr = \
Update properties of Catalog with specified id.\n\
Get/show Catalog after update, if output options -o|-O are specified.

devops.catalog.delete = Delete Catalog
devops.catalog.delete.args = catalogId
devops.catalog.delete.args.catalogId = $devops.catalog.id
devops.catalog.delete.options = $general.delete.options
devops.catalog.delete.options.o = $global.options.o
devops.catalog.delete.options.O = $global.options.O
devops.catalog.delete.descr = \
Delete Catalog with specified id.\n\
List Catalogs after delete, if output options -o|-O are specified.

devops.catalog.solution = List Solutions in Catalog
devops.catalog.solution.args = catalogId
devops.catalog.solution.args.catalogId = $devops.catalog.id
devops.catalog.solution.options = $devops.catalog.ls.options
devops.catalog.solution.descr = \
List Solution in Catalog.

devops.catalog.set = Set current Catalog
devops.catalog.set.args = catalogId
devops.catalog.set.args.catalogId = $devops.catalog.id
devops.catalog.set.options = o
devops.catalog.set.options.o = $devops.options.pwd
devops.catalog.set.descr = \
Set current Catalog.\n\
Solution names will be resolved for this Catalog.

devops.catalog.unset = Unset current Catalog
devops.catalog.unset.descr = \
Unset current Catalog.

devops.catalog.schema = Show attributes/properties of Catalog
devops.catalog.schema.options = f,g
devops.catalog.schema.options.f = Show attributes/properties of CatalogFilter
devops.catalog.schema.options.g = Show attributes/properties of CatalogOptions

devops.catalog.help = Show help on commands for Catalog

## Solution

devops.solution = Solution operations

devops.solution.id = Identifier of Solution (name | url | id | uuid)
devops.solution.idx = Identifier of Solution (name | url | id | uuid). Defaults to current Solution, if not specified.

devops.solution.get.options=$global.get.options
devops.solution.ls.options=$global.ls.options

devops.solution.ls = List Solution
devops.solution.ls.args = $global.ls.args
devops.solution.ls.args.q = $global.ls.args.q
devops.solution.ls.options = q,props++,$devops.solution.get.options
devops.solution.ls.options.q = $global.options.q
devops.solution.ls.options.props = any property of SolutionFilter (solution schema -f)
devops.solution.ls.options.o = $global.options.o
devops.solution.ls.options.O = $global.options.O

devops.solution.ls.options.o = $global.options.o
devops.solution.ls.options.O = $global.options.O
devops.solution.ls.descr = \
List Solutions

devops.solution.get = Get Details of Solution
devops.solution.get.args = solutionId
devops.solution.get.args.solutionId = $devops.solution.id
devops.solution.get.options = props++,$global.get.options
devops.solution.get.options.props = any property of SolutionOptions (solution schema -g)
devops.solution.get.options.o = $global.options.o
devops.solution.get.options.O = $global.options.O
devops.solution.get.descr = \
Get Details of Solution

devops.solution.view = View Solution dashboard in web browser
devops.solution.view.args = solutionId
devops.solution.view.args.solutionId = $devops.solution.id
devops.solution.view.descr =\
Requires environment where a default web-browser is configured and can be started/open.\n\
You need to login via the web-browser the first time to start a web session in Cloud Manager.

devops.solution.create = Create Solution
devops.solution.create.args = solutionId
devops.solution.create.args.solutionId = $devops.solution.id
devops.solution.create.options = props++,$devops.solution.get.options
devops.solution.create.options.props = Solution properties (solution schema)
devops.solution.create.options.o = $global.options.o
devops.solution.create.options.O = $global.options.O
devops.solution.create.descr = \
Create Solution with specified name and properties.\n\
Get/show after creation, if output options -o|-O are specified.

devops.solution.update = Update Solution
devops.solution.update.args = solutionId
devops.solution.update.args.solutionId = $devops.solution.id
devops.solution.update.options = $devops.solution.create.options
devops.solution.update.options.props = $devops.solution.create.options.props
devops.solution.update.options.o = $global.options.o
devops.solution.update.options.O = $global.options.O
devops.solution.update.descr = \
Update properties of Solution with specified id.\n\
Get/show Solution after update, if output options -o|-O are specified.

devops.solution.delete = Delete Solution
devops.solution.delete.args = solutionId
devops.solution.delete.args.solutionId = $devops.solution.id
devops.solution.delete.options = $general.delete.options
devops.solution.delete.options.o = $global.options.o
devops.solution.delete.options.O = $global.options.O
devops.solution.delete.descr = \
Delete Solution with specified id.\n\
List Solutions after delete, if output options -o|-O are specified.

devops.solution.schema = Show attributes/properties of Solution
devops.solution.schema.options = f,g
devops.solution.schema.options.f = Show attributes/properties of SolutionFilter
devops.solution.schema.options.g = Show attributes/properties of SolutionOptions

devops.solution.help = Show help on commands for Solution

## Marketplace

devops.marketplace = List Marketplace Solutions

devops.install = Install Solution (standalone or from Catalog)
devops.install.args = solution
devops.install.args.solution = Solution to install (name | id | uuid)
devops.install.descr = To install from Catalog use qualified name catalog/solution.





#################
##SSO Gateway

sso = SSO operations

sso.login = Login to Server
sso.login.args = api+
sso.login.args.api = URL to any service (e.g. http://localhost:5050, https://devops.acme.com, https://cloud.einnovator.org)
sso.login.options = u,p,a
sso.login.options.u = Username
sso.login.options.p = Password
sso.login.options.a = API
sso.login.options.clientId = Optional client id
sso.login.options.clientSecret = Optional client secret

## API

sso.api = API operations

sso.api.ls = List configured APIs
#sso.api.ls.options =

sso.api.get = Show current API
#sso.api.get.options = 

sso.api.delete = Forget API
sso.api.set = Set current API

sso.api.unset = Unset current API
sso.api.help = Show help on commands for APIs

## Token

sso.token = OAuth Token operations
sso.token.show = Show Token details
sso.token.delete = Delete Token
sso.token.help = Show help on commands for Tokens

## User

sso.user = User operations
sso.user.id = User identifier (id | uuid)

sso.user.ls = List Users
sso.user.ls.args =  $global.ls.args
sso.user.ls.args.q = $global.ls.args.q
sso.user.ls.options = props++,$global.ls.options
sso.user.ls.options.q = $global.options.q
sso.user.ls.options.props = any property of UserFilter (user schema -f)
sso.user.ls.options.o = $global.options.o
sso.user.ls.options.O = $global.options.O

sso.user.get = Get Details of User
sso.user.get.options = props++,$global.get.options
sso.user.get.args = userId
sso.user.get.args.userId = $sso.user.id
sso.user.get.options = props++,$global.get.options
sso.user.get.options.props = any property of UserOptions (user schema -g)
sso.user.get.options.o = $global.options.o
sso.user.get.options.O = $global.options.O

sso.user.create = Create User
sso.user.create.args = name
sso.user.create.args.name = $sso.user.name
sso.user.create.options = props++,$global.create.options
sso.user.create.options.props = User properties (user schema)
sso.user.create.options.o = $global.options.o
sso.user.create.options.O = $global.options.O
sso.user.create.descr=\
Create User with given name.\n\
Get/Show User after create, if output options -o|-O are specified.

sso.user.update = Update User
sso.user.update.args = userId
sso.user.update.args.userId = $sso.user.id
sso.user.update.options = $sso.user.create.options
sso.user.update.options.props = $sso.user.create.options.props
sso.user.update.options.o = $global.options.o
sso.user.update.options.O = $global.options.O
sso.user.update.descr=\
Update User with specified id.\n\
Get/Show User after update, if output options -o|-O are specified.

sso.user.delete = Delete User
sso.user.delete.args = userId
sso.user.delete.args.userId = $sso.user.id
sso.user.delete.options = $general.delete.options
sso.user.delete.options.o = $global.options.o
sso.user.delete.options.O = $global.options.O
sso.user.delete.descr = \
Delete User with specified id.\n\
List Users after delete, if output options -o|-O are specified.

sso.user.schema = Show attributes/properties of User
sso.user.help = Show help on commands for User

## Group

sso.group = User Group operations
sso.group.id = Group identifier (id | uuid)

sso.group.ls = List Groups
sso.group.ls.args =  $global.ls.args
sso.group.ls.args.q = $global.ls.args.q
sso.group.ls.options = props++,$global.ls.options
sso.group.ls.options.q = $global.options.q
sso.group.ls.options.props = any property of GroupFilter (group schema -f)
sso.group.ls.options.o = $global.options.o
sso.group.ls.options.O = $global.options.O

sso.group.get = Get Details of Group
sso.group.get.options = props++,$global.get.options
sso.group.get.args = groupId
sso.group.get.args.groupId = $sso.group.id
sso.group.get.options = props++,$global.get.options
sso.group.get.options.props = any property of GroupOptions (group schema -g)
sso.group.get.options.o = $global.options.o
sso.group.get.options.O = $global.options.O

sso.group.create = Create Group
sso.group.create.args = name
sso.group.create.args.name = $sso.group.name
sso.group.create.options = props++,$global.create.options
sso.group.create.options.props = Group properties (group schema)
sso.group.create.options.o = $global.options.o
sso.group.create.options.O = $global.options.O
sso.group.create.descr=\
Create Group with given name.\n\
Get/Show Group after create, if output options -o|-O are specified.

sso.group.update = Update Group
sso.group.update.args = groupId
sso.group.update.args.groupId = $sso.group.id
sso.group.update.options = $sso.group.create.options
sso.group.update.options.props = $sso.group.create.options.props
sso.group.update.options.o = $global.options.o
sso.group.update.options.O = $global.options.O
sso.group.update.descr=\
Update Group with specified id.\n\
Get/Show Group after update, if output options -o|-O are specified.

sso.group.delete = Delete Group
sso.group.delete.args = groupId
sso.group.delete.args.groupId = $sso.group.id
sso.group.delete.options = $general.delete.options
sso.group.delete.options.o = $global.options.o
sso.group.delete.options.O = $global.options.O
sso.group.delete.descr = \
Delete Group with specified id.\n\
List Groups after delete, if output options -o|-O are specified.


sso.group.set = Set current Group
sso.group.unset = Unset current Group

sso.group.schema = Show attributes/properties of Group
sso.group.help = Show help on commands for Group

## Invitation

sso.invitation = Invitation operations
sso.invitation.id = Invitation identifier (id | uuid)

sso.invitation.ls = List Invitations
sso.invitation.ls.args =  $global.ls.args
sso.invitation.ls.args.q = $global.ls.args.q
sso.invitation.ls.options = props++,$global.ls.options
sso.invitation.ls.options.q = $global.options.q
sso.invitation.ls.options.props = any property of InvitationFilter (invitation schema -f)
sso.invitation.ls.options.o = $global.options.o
sso.invitation.ls.options.O = $global.options.O

sso.invitation.get = Get Details of Invitation
sso.invitation.get.options = props++,$global.get.options
sso.invitation.get.args = invitationId
sso.invitation.get.args.invitationId = $sso.invitation.id
sso.invitation.get.options = props++,$global.get.options
sso.invitation.get.options.props = any property of InvitationOptions (invitation schema -g)
sso.invitation.get.options.o = $global.options.o
sso.invitation.get.options.O = $global.options.O

sso.invitation.create = Create Invitation
sso.invitation.create.args = name
sso.invitation.create.args.name = $sso.invitation.name
sso.invitation.create.options = props++,$global.create.options
sso.invitation.create.options.props = Invitation properties (invitation schema)
sso.invitation.create.options.o = $global.options.o
sso.invitation.create.options.O = $global.options.O
sso.invitation.create.descr=\
Create Invitation with given name.\n\
Get/Show Invitation after create, if output options -o|-O are specified.

sso.invitation.update = Update Invitation
sso.invitation.update.args = invitationId
sso.invitation.update.args.invitationId = $sso.invitation.id
sso.invitation.update.options = $sso.invitation.create.options
sso.invitation.update.options.props = $sso.invitation.create.options.props
sso.invitation.update.options.o = $global.options.o
sso.invitation.update.options.O = $global.options.O
sso.invitation.update.descr=\
Update Invitation with specified id.\n\
Get/Show Invitation after update, if output options -o|-O are specified.

sso.invitation.delete = Delete Invitation
sso.invitation.delete.args = invitationId
sso.invitation.delete.args.invitationId = $sso.invitation.id
sso.invitation.delete.options = $general.delete.options
sso.invitation.delete.options.o = $global.options.o
sso.invitation.delete.options.O = $global.options.O
sso.invitation.delete.descr = \
Delete Invitation with specified id.\n\
List Invitations after delete, if output options -o|-O are specified.

sso.invitation.schema = Show attributes/properties of Invitation

sso.invitation.help = Show help on commands for Invitation

## Role

sso.role = Role operations
sso.role.id = Role identifier (id | uuid)

sso.role.ls = List Roles
sso.role.ls.args =  $global.ls.args
sso.role.ls.args.q = $global.ls.args.q
sso.role.ls.options = props++,$global.ls.options
sso.role.ls.options.q = $global.options.q
sso.role.ls.options.props = any property of RoleFilter (role schema -f)
sso.role.ls.options.o = $global.options.o
sso.role.ls.options.O = $global.options.O

sso.role.get = Get Details of Role
sso.role.get.options = props++,$global.get.options
sso.role.get.args = roleId
sso.role.get.args.roleId = $sso.role.id
sso.role.get.options = props++,$global.get.options
sso.role.get.options.props = any property of RoleOptions (role schema -g)
sso.role.get.options.o = $global.options.o
sso.role.get.options.O = $global.options.O

sso.role.create = Create Role
sso.role.create.args = name
sso.role.create.args.name = $sso.role.name
sso.role.create.options = props++,$global.create.options
sso.role.create.options.props = any property of Role (role schema)
sso.role.create.options.o = $global.options.o
sso.role.create.options.O = $global.options.O
sso.role.create.descr=\
Create Role with given name.\n\
Get/Show Role after create, if output options -o|-O are specified.

sso.role.update = Update Role
sso.role.update.args = roleId
sso.role.update.args.roleId = $sso.role.id
sso.role.update.options = $sso.role.create.options
sso.role.update.options.props = $sso.role.create.options.props
sso.role.update.options.o = $global.options.o
sso.role.update.options.O = $global.options.O
sso.role.update.descr=\
Update Role with specified id.\n\
Get/Show Role after update, if output options -o|-O are specified.

sso.role.delete = Delete Role
sso.role.delete.args = roleId
sso.role.delete.args.roleId = $sso.role.id
sso.role.delete.options = $general.delete.options
sso.role.delete.options.o = $global.options.o
sso.role.delete.options.O = $global.options.O
sso.role.delete.descr = \
Delete Role with specified id.\n\
List Roles after delete, if output options -o|-O are specified.

sso.role.schema = Show attributes/properties of Role
sso.role.help = Show help on commands for Role

## Group Membership Role

sso.member = Group Membership operations
sso.member.id = Member identifier (id | uuid)

sso.member.ls = List Members of a Group
sso.member.ls.args =  $global.ls.args
sso.member.ls.args.q = $global.ls.args.q
sso.member.ls.options = props++,$global.ls.options
sso.member.ls.options.q = $global.options.q
sso.member.ls.options.props = any property of MemberFilter (member schema -f)
sso.member.ls.options.o = $global.options.o
sso.member.ls.options.O = $global.options.O

sso.member.get = Get Details of Member
sso.member.get.options = props++,$global.get.options
sso.member.get.args = memberId
sso.member.get.args.memberId = $sso.member.id
sso.member.get.options = props++,$global.get.options
sso.member.get.options.props = any property of MemberOptions (member schema -g)
sso.member.get.options.o = $global.options.o
sso.member.get.options.O = $global.options.O

sso.member.add = Add Member to Group
sso.member.add.args = groupId
sso.member.add.args.groupId = $sso.group.Id
sso.member.add.options = props++,$global.add.options
sso.member.add.options.props = any property of Member (member schema)
sso.member.add.options.o = $global.options.o
sso.member.add.options.O = $global.options.O
sso.member.add.descr=\
Create Member with given name.\n\
Get/Show Member after add, if output options -o|-O are specified.

sso.member.update = Update Member
sso.member.update.args = memberId
sso.member.update.args.memberId = $sso.member.id
sso.member.update.options = $sso.member.add.options
sso.member.update.options.props = $sso.member.add.options.props
sso.member.update.options.o = $global.options.o
sso.member.update.options.O = $global.options.O
sso.member.update.descr=\
Update Member with specified id.\n\
Get/Show Member after update, if output options -o|-O are specified.

sso.member.remove = Remove Member from Group
sso.member.remove.args = memberId
sso.member.remove.args.memberId = $sso.member.id
sso.member.remove.options = $general.remove.options
sso.member.remove.options.o = $global.options.o
sso.member.remove.options.O = $global.options.O
sso.member.remove.descr = \
Remove Member from Group with specified id.\n\
List Members after remove, if output options -o|-O are specified.

sso.member.schema = Show attributes/properties of Group Member
sso.member.help = Show help on commands for Group Member

## Client Apps

sso.client = Client operations
sso.client.id = Client identifier (id | uuid)

sso.client.ls = List Clients
sso.client.ls.args =  $global.ls.args
sso.client.ls.args.q = $global.ls.args.q
sso.client.ls.options = props++,$global.ls.options
sso.client.ls.options.q = $global.options.q
sso.client.ls.options.props = any property of ClientFilter (client schema -f)
sso.client.ls.options.o = $global.options.o
sso.client.ls.options.O = $global.options.O

sso.client.get = Get Details of Client
sso.client.get.options = props++,$global.get.options
sso.client.get.args = clientId
sso.client.get.args.clientId = $sso.client.id
sso.client.get.options = props++,$global.get.options
sso.client.get.options.props = any property of ClientOptions (client schema -g)
sso.client.get.options.o = $global.options.o
sso.client.get.options.O = $global.options.O

sso.client.create = Create Client
sso.client.create.args = name
sso.client.create.args.name = $sso.client.name
sso.client.create.options = props++,$global.create.options
sso.client.create.options.props = any property of Client (client schema)
sso.client.create.options.o = $global.options.o
sso.client.create.options.O = $global.options.O
sso.client.create.descr=\
Create Client with given name.\n\
Get/Show Client after create, if output options -o|-O are specified.

sso.client.update = Update Client
sso.client.update.args = clientId
sso.client.update.args.clientId = $sso.client.id
sso.client.update.options = $sso.client.create.options 
sso.client.update.options.props = $sso.client.create.options.props
sso.client.update.options.o = $global.options.o
sso.client.update.options.O = $global.options.O
sso.client.update.descr=\
Update Client with specified id.\n\
Get/Show Client after update, if output options -o|-O are specified.

sso.client.delete = Delete Client
sso.client.delete.args = clientId
sso.client.delete.args.clientId = $sso.client.id
sso.client.delete.options = $general.delete.options
sso.client.delete.options.o = $global.options.o
sso.client.delete.options.O = $global.options.O
sso.client.delete.descr = \
Delete Client with specified id.\n\
List Clients after delete, if output options -o|-O are specified.


sso.client.schema = Show attributes/properties of Client

sso.client.help = Show help on commands for Client

## SSO Generic

sso.ls = List resources
sso.ls.descr = List Users | Groups | Roles | Clients based on flags.
devops.ls.descr = List Spaces (| Domain | Registry | Vcs) based on flags. Defaults to list Spaces.

sso.ls.options = u,g,rl,ca,$global.ls.options
sso.ls.options.u = List Users
sso.ls.options.g = List Groups
sso.ls.options.rl = List Roles
sso.ls.options.ca = List Client Apps
devops.ls.options.o = $global.options.o
devops.ls.options.O = $global.options.O


sso.cd = Change current Group
sso.cd.descr = Sets default group where members are added
sso.cd.options = g,w
sso.cd.options.g = Set default group
sso.cd.options.w = $generic.pwd

sso.pwd = Show current default/parent resources
sso.pwd.descr = Show current resources: Group

#################
# Notification Hub

notifications = Notifications Hub operations

## Events

notifications.event = Event operations
notifications.event.id = Event identifier (id | uuid)

notifications.event.publish = Publish Event

notifications.event.ls = List Tracked Events
notifications.event.ls.args =  $global.ls.args
notifications.event.ls.args.q = $global.ls.args.q
notifications.event.ls.options = props++,$global.ls.options
notifications.event.ls.options.q = $global.options.q
notifications.event.ls.options.props = any property of EventFilter (event schema -f)
notifications.event.ls.options.o = $global.options.o
notifications.event.ls.options.O = $global.options.O

notifications.event.get = Get Details of Tracked Event
notifications.event.get.options = props++,$global.get.options
notifications.event.get.args = eventId
notifications.event.get.args.eventId = $notifications.event.id
notifications.event.get.options = props++,$global.get.options
notifications.event.get.options.props = any property of EventOptions (event schema -g)
notifications.event.get.options.o = $global.options.o
notifications.event.get.options.O = $global.options.O

notifications.event.delete = Delete Tracked Event
notifications.event.delete.args = eventId
notifications.event.delete.args.eventId = $notifications.event.id
notifications.event.delete.options = $general.delete.options
notifications.event.delete.options.o = $global.options.o
notifications.event.delete.options.O = $global.options.O
notifications.event.delete.descr = \
Delete Event with specified id.\n\
List Tracked Events after delete, if output options -o|-O are specified.


notifications.event.schema = Show attributes/properties of Event
notifications.event.help = Show help on commands for Event

## Notifications

notifications.notification = Notification operations
notifications.notification.id = Notification identifier (id | uuid)

notifications.notification.ls = List Notifications
notifications.notification.ls.args =  $global.ls.args
notifications.notification.ls.args.q = $global.ls.args.q
notifications.notification.ls.options = props++,$global.ls.options
notifications.notification.ls.options.q = $global.options.q
notifications.notification.ls.options.props = any property of NotificationFilter (notification schema -f)
notifications.notification.ls.options.o = $global.options.o
notifications.notification.ls.options.O = $global.options.O

notifications.notification.get = Get Details of Notification
notifications.notification.get.options = props++,$global.get.options
notifications.notification.get.args = notificationId
notifications.notification.get.args.notificationId = $notifications.notification.id
notifications.notification.get.options = props++,$global.get.options
notifications.notification.get.options.props = any property of NotificationOptions (notification schema -g)
notifications.notification.get.options.o = $global.options.o
notifications.notification.get.options.O = $global.options.O

notifications.notification.delete = Delete Notification
notifications.notification.delete.args = notificationId
notifications.notification.delete.args.notificationId = $notifications.notification.id
notifications.notification.delete.options = $general.delete.options
notifications.notification.delete.options.o = $global.options.o
notifications.notification.delete.options.O = $global.options.O
notifications.notification.delete.descr = \
Delete Notification with specified id.\n\
List Notifications after delete, if output options -o|-O are specified.

notifications.notification.schema = Show attributes/properties of Notification
notifications.notification.help = Show help on commands for Notification

## Template

notifications.template = Template operations

notifications.template.id = Template identifier (id | uuid)

notifications.template.ls = List Templates
notifications.template.ls.args =  $global.ls.args
notifications.template.ls.args.q = $global.ls.args.q
notifications.template.ls.options = props++,$global.ls.options
notifications.template.ls.options.q = $global.options.q
notifications.template.ls.options.props = any property of TemplateFilter (template schema -f)
notifications.template.ls.options.o = $global.options.o
notifications.template.ls.options.O = $global.options.O

notifications.template.get = Get Details of Template
notifications.template.get.options = props++,$global.get.options
notifications.template.get.args = templateId
notifications.template.get.args.templateId = $notifications.template.id
notifications.template.get.options = props++,$global.get.options
notifications.template.get.options.props = any property of TemplateOptions (template schema -g)
notifications.template.get.options.o = $global.options.o
notifications.template.get.options.O = $global.options.O

notifications.template.create = Create Template
notifications.template.create.args = name
notifications.template.create.args.name = $notifications.template.name
notifications.template.create.options = props++,$global.create.options
notifications.template.create.options.props = any property of Template (template schema)
notifications.template.create.options.o = $global.options.o
notifications.template.create.options.O = $global.options.O
notifications.template.create.descr=\
Create Template with given name.\n\
Get/Show Template after create, if output options -o|-O are specified.

notifications.template.update = Update Template
notifications.template.update.args = templateId
notifications.template.update.args.templateId = $notifications.template.id
notifications.template.update.options = $notifications.template.create.options
notifications.template.update.options.props = $notifications.template.create.options.props
notifications.template.update.options.o = $global.options.o
notifications.template.update.options.O = $global.options.O
notifications.template.update.descr=\
Update Template with specified id.\n\
Get/Show Template after update, if output options -o|-O are specified.

notifications.template.delete = Delete Template
notifications.template.delete.args = templateId
notifications.template.delete.args.templateId = $notifications.template.id
notifications.template.delete.options = $general.delete.options
notifications.template.delete.options.o = $global.options.o
notifications.template.delete.options.O = $global.options.O
notifications.template.delete.descr = \
Delete Template with specified id.\n\
List Templates after delete, if output options -o|-O are specified.


notifications.template.schema = Show attributes/properties of Template

notifications.template.help = Show help on commands for Template

## NotificationType

notifications.notification-type = NotificationType operations
notifications.notification-type.id = NotificationType identifier (id | uuid)

notifications.notification-type.ls = List NotificationTypes
notifications.notification-type.ls.args =  $global.ls.args
notifications.notification-type.ls.args.q = $global.ls.args.q
notifications.notification-type.ls.options = props++,$global.ls.options
notifications.notification-type.ls.options.q = $global.options.q
notifications.notification-type.ls.options.props = any property of NotificationTypeFilter (notification-type schema -f)
notifications.notification-type.ls.options.o = $global.options.o
notifications.notification-type.ls.options.O = $global.options.O

notifications.notification-type.get = Get Details of NotificationType
notifications.notification-type.get.options = props++,$global.get.options
notifications.notification-type.get.args = typeId
notifications.notification-type.get.args.typeId = $notifications.notification-type.id
notifications.notification-type.get.options = props++,$global.get.options
notifications.notification-type.get.options.props = any property of NotificationTypeOptions (notification-type schema -g)
notifications.notification-type.get.options.o = $global.options.o
notifications.notification-type.get.options.O = $global.options.O

notifications.notification-type.create = Create NotificationType
notifications.notification-type.create.args = name
notifications.notification-type.create.args.name = $notifications.notification-type.name
notifications.notification-type.create.options = props++,$global.create.options
notifications.notification-type.create.options.props = any property of NotificationType (notification-type schema)
notifications.notification-type.create.options.o = $global.options.o
notifications.notification-type.create.options.O = $global.options.O
notifications.notification-type.create.descr=\
Create NotificationType with given name.\n\
Get/Show NotificationType after create, if output options -o|-O are specified.

notifications.notification-type.update = Update NotificationType
notifications.notification-type.update.args = notification-typeId
notifications.notification-type.update.args.notification-typeId = $notifications.notification-type.id
notifications.notification-type.update.options =$notifications.notification-type.create.options
notifications.notification-type.update.options.props = $notifications.notification-type.create.options.props
notifications.notification-type.update.options.o = $global.options.o
notifications.notification-type.update.options.O = $global.options.O
notifications.notification-type.update.descr=\
Update NotificationType with specified id.\n\
Get/Show NotificationType after update, if output options -o|-O are specified.

notifications.notification-type.delete = Delete NotificationType
notifications.notification-type.delete.args = notification-typeId
notifications.notification-type.delete.args.notification-typeId = $notifications.notification-type.id
notifications.notification-type.delete.options = $general.delete.options
notifications.notification-type.delete.options.o = $global.options.o
notifications.notification-type.delete.options.O = $global.options.O
notifications.notification-type.delete.descr = \
Delete NotificationType with specified id.\n\
List NotificationTypes after delete, if output options -o|-O are specified.

notifications.notification-type.schema = Show attributes/properties of Notification Type
notifications.notification-type.help = Show help on commands for Notification Type

## Mail/SMS Job

notifications.mjob = Mail/SMS Job operations
notifications.mjob.id = Mail/SMS Job identifier (id | uuid)

notifications.mjob.ls = List Mail/SMS Jobs
notifications.mjob.ls.args =  $global.ls.args
notifications.mjob.ls.args.q = $global.ls.args.q
notifications.mjob.ls.options = props++,$global.ls.options
notifications.mjob.ls.options.q = $global.options.q
notifications.mjob.ls.options.props = any property of Mail/SMS JobFilter (mjob schema -f)
notifications.mjob.ls.options.o = $global.options.o
notifications.mjob.ls.options.O = $global.options.O

notifications.mjob.get = Get Details of Mail/SMS Job
notifications.mjob.get.options = props++,$global.get.options
notifications.mjob.get.args = mjobId
notifications.mjob.get.args.mjobId = $notifications.mjob.id
notifications.mjob.get.options = props++,$global.get.options
notifications.mjob.get.options.props = any property of Mail/SMS JobOptions (mjob schema -g)
notifications.mjob.get.options.o = $global.options.o
notifications.mjob.get.options.O = $global.options.O

notifications.mjob.create = Create Mail/SMS Job
notifications.mjob.create.args = name
notifications.mjob.create.args.name = $notifications.mjob.name
notifications.mjob.create.options = props++,$global.create.options
notifications.mjob.create.options.props = any property of Mail/SMS Job (mjob schema)
notifications.mjob.create.options.o = $global.options.o
notifications.mjob.create.options.O = $global.options.O
notifications.mjob.create.descr=\
Create Mail/SMS Job with given name.\n\
Get/Show Mail/SMS Job after create, if output options -o|-O are specified.

notifications.mjob.update = Update Mail/SMS Job
notifications.mjob.update.args = mjobId
notifications.mjob.update.args.mjobId = $notifications.mjob.id
notifications.mjob.update.options = $notifications.mjob.create.options
notifications.mjob.update.options.props = $notifications.mjob.create.options.props
notifications.mjob.update.options.o = $global.options.o
notifications.mjob.update.options.O = $global.options.O
notifications.mjob.update.descr=\
Update Mail/SMS Job with specified id.\n\
Get/Show Mail/SMS Job after update, if output options -o|-O are specified.

notifications.mjob.delete = Delete Mail/SMS Job
notifications.mjob.delete.args = mjobId
notifications.mjob.delete.args.mjobId = $notifications.mjob.id
notifications.mjob.delete.options = $general.delete.options
notifications.mjob.delete.options.o = $global.options.o
notifications.mjob.delete.options.O = $global.options.O
notifications.mjob.delete.descr = \
Delete Mail/SMS Job with specified id.\n\
List Mail/SMS Jobs after delete, if output options -o|-O are specified.


notifications.mjob.schema = Show attributes/properties of Mail/SMS
notifications.mjob.help = Show help on commands for Mail/SMS


#################
# Social Hub

social = Social Hub operations

## Channel

social.channel = Channel operations
social.channel.id = Channel identifier (id | uuid)
social.channel.name = Channel name

social.channel.ls = List Channels
social.channel.ls.args =  $global.ls.args
social.channel.ls.args.q = $global.ls.args.q
social.channel.ls.options = props++,$global.ls.options
social.channel.ls.options.q = $global.options.q
social.channel.ls.options.props = any property of ChannelFilter (channel schema -f)
social.channel.ls.options.o = $global.options.o
social.channel.ls.options.O = $global.options.O

social.channel.get = Get Details of Channel
social.channel.get.options = props++,$global.get.options
social.channel.get.args = channelId
social.channel.get.args.channelId = $social.channel.id
social.channel.get.options = props++,$global.get.options
social.channel.get.options.props = any property of ChannelOptions (channel schema -g)
social.channel.get.options.o = $global.options.o
social.channel.get.options.O = $global.options.O

social.channel.create = Create Channel
social.channel.create.args = name
social.channel.create.args.name = $social.channel.name
social.channel.create.options = props++,$global.create.options
social.channel.create.options.props = any property of Channel (channel schema)
social.channel.create.options.o = $global.options.o
social.channel.create.options.O = $global.options.O
social.channel.create.descr=\
Create Channel with given name.\n\
Get/Show Channel after create, if output options -o|-O are specified.

social.channel.update = Update Channel
social.channel.update.args = channelId
social.channel.update.args.channelId = $social.channel.id
social.channel.update.options = $social.channel.create.options
social.channel.update.options.props = $social.channel.create.options.props
social.channel.update.options.o = $global.options.o
social.channel.update.options.O = $global.options.O
social.channel.update.descr=\
Update Channel with specified id.\n\
Get/Show Channel after update, if output options -o|-O are specified.

social.channel.delete = Delete Channel
social.channel.delete.args = channelId
social.channel.delete.args.channelId = $social.channel.id
social.channel.delete.options = $general.delete.options
social.channel.delete.options.o = $global.options.o
social.channel.delete.options.O = $global.options.O
social.channel.delete.descr = \
Delete Channel with specified id.\n\
List Channels after delete, if output options -o|-O are specified.

social.channel.schema = Show attributes/properties of Channel
social.channel.help = Show help on commands for Channel

## Message

social.message = Message operations
social.message.id = Message identifier (id | uuid)

social.message.ls = List Messages in Channel
social.message.ls.args =  channelId
social.message.ls.args.channelId = $social.msg.id,
social.message.ls.options = props++,$global.ls.options
social.message.ls.options.q = $global.options.q
social.message.ls.options.props = any property of MessageFilter (message schema -f)
social.message.ls.options.o = $global.options.o
social.message.ls.options.O = $global.options.O

social.message.get = Get Details of Message
social.message.get.options = props++,$global.get.options
social.message.get.args = messageId
social.message.get.args.messageId = $social.message.id
social.message.get.options = props++,$global.get.options
social.message.get.options.props = any property of MessageOptions (message schema -g)
social.message.get.options.o = $global.options.o
social.message.get.options.O = $global.options.O

social.message.get = Get Details of Message
social.message.get.options = props++,$global.get.options
social.message.get.args = messageId
social.message.get.args.messageId = $social.message.id
social.message.get.options = props++,$global.get.options
social.message.get.options.props = any property of MessageOptions (message schema -g)
social.message.get.options.o = $global.options.o
social.message.get.options.O = $global.options.O

social.message.post = Post Message
social.message.post.args = channelId
social.message.post.args.channelId = $social.channel.id
social.message.post.options = props++,$global.post.options
social.message.post.options.props = any property of Message (message schema)
social.message.post.options.o = $global.options.o
social.message.post.options.O = $global.options.O
social.message.post.descr=\
Create Message with given name.\n\
Get/Show Message after post, if output options -o|-O are specified.

social.message.update = Update Message
social.message.update.args = messageId
social.message.update.args.messageId = $social.channel.id
social.message.update.options = $social.message.post.options
social.message.update.options.props = $social.message.post.options.props
social.message.update.options.o = $global.options.o
social.message.update.options.O = $global.options.O
social.message.update.descr=\
Update Message with specified id.\n\
Get/Show Message after update, if output options -o|-O are specified.

social.message.delete = Delete Message
social.message.delete.args = messageId
social.message.delete.args.messageId = $social.message.id
social.message.delete.options = $general.delete.options
social.message.delete.options.o = $global.options.o
social.message.delete.options.O = $global.options.O
social.message.delete.descr = \
Delete Message with specified id.\n\
List Messages after delete, if output options -o|-O are specified.

social.message.schema = Show attributes/properties of Message
social.message.help = Show help on commands for Message

## Reaction

social.reaction = Reaction operations
social.reaction.id = Reaction identifier (id | uuid)

social.reaction.ls = List Reactions of Message
social.reaction.ls.args =  msgId
social.reaction.ls.args.msgId = $social.msg.id,
social.reaction.ls.options = props++,$global.ls.options
social.reaction.ls.options.q = $global.options.q
social.reaction.ls.options.props = any property of ReactionFilter (reaction schema -f)
social.reaction.ls.options.o = $global.options.o
social.reaction.ls.options.O = $global.options.O

social.reaction.get = Get Details of Reaction
social.reaction.get.options = props++,$global.get.options
social.reaction.get.args = reactionId
social.reaction.get.args.reactionId = $social.reaction.id
social.reaction.get.options = props++,$global.get.options
social.reaction.get.options.props = any property of ReactionOptions (reaction schema -g)
social.reaction.get.options.o = $global.options.o
social.reaction.get.options.O = $global.options.O

social.reaction.post = Create Reaction
social.reaction.post.args = msgId
social.reaction.post.args.msgId = $social.message.id
social.reaction.post.options = props++,$global.post.options
social.reaction.post.options.props = any property of Reaction (reaction schema)
social.reaction.post.options.o = $global.options.o
social.reaction.post.options.O = $global.options.O
social.reaction.post.descr=\
Create Reaction with given name.\n\
Get/Show Reaction after post, if output options -o|-O are specified.

social.reaction.update = Update Reaction
social.reaction.update.args = reactionId
social.reaction.update.args.reactionId = $social.reaction.id
social.reaction.update.options = $social.reaction.post.options
social.reaction.update.options.props = $social.reaction.post.options.props
social.reaction.update.options.o = $global.options.o
social.reaction.update.options.O = $global.options.O
social.reaction.update.descr=\
Update Reaction with specified id.\n\
Get/Show Reaction after update, if output options -o|-O are specified.

social.reaction.delete = Delete Reaction
social.reaction.delete.args = reactionId
social.reaction.delete.args.reactionId = $social.reaction.id
social.reaction.delete.options = $general.delete.options
social.reaction.delete.options.o = $global.options.o
social.reaction.delete.options.O = $global.options.O
social.reaction.delete.descr = \
Delete Reaction with specified id.\n\
List Reactions after delete, if output options -o|-O are specified.

social.reaction.schema = Show attributes/properties of Reaction
social.reaction.help = Show help on commands for Reaction


#################
# Document Store

documents = Document Store operations

## Document

documents.document = Document and Folder operations

documents.document.id = Document/File path

documents.document.ls = List Documents in Folder
documents.document.ls.args = path
documents.document.ls.args.path = folder path
documents.document.ls.options = q,props++,$global.ls.options
documents.document.ls.options.q = $global.options.q
documents.document.ls.options.props = any property of DocumentFilter (document schema -f)
documents.document.ls.options.o = $global.options.o
documents.document.ls.options.O = $global.options.O

documents.document.get = Get Details of Document
documents.document.get.options = props++,$global.get.options
documents.document.get.args = path
documents.document.get.args.documentId = $documents.document.id
documents.document.get.options = props++,$global.get.options
documents.document.get.options.props = any property of DocumentOptions (document schema -g)
documents.document.get.options.o = $global.options.o
documents.document.get.options.O = $global.options.O

documents.document.create = Create Document
documents.document.create.args = path
documents.document.create.args.path = $documents.document.id
documents.document.create.options = props++,$global.create.options
documents.document.create.options.props = any property of Document (payment schema)
documents.document.create.options.o = $global.options.o
documents.document.create.options.O = $global.options.O
documents.document.create.descr=\
Create Document with given path.\n\
Get/Show Document after create, if output options -o|-O are specified.

documents.document.update = Update Document
documents.document.update.args = path
documents.document.update.args.path = $documents.document.id
documents.document.update.options = $documents.document.create.options
documents.document.update.options.props = $documents.document.create.options.props 
documents.document.update.options.o = $global.options.o
documents.document.update.options.O = $global.options.O
documents.document.update.descr=\
Update Document with specified path.\n\
Get/Show Document after update, if output options -o|-O are specified.

documents.document.delete = Delete Document/File
documents.document.delete.args = paymentId
documents.document.delete.args.paymentId = $documents.document.id
documents.document.delete.options = $general.delete.options
documents.document.delete.options.o = $global.options.o
documents.document.delete.options.O = $global.options.O
documents.document.delete.descr = \
Delete Document/File with specified id.\n\
List Document/Files after delete, if output options -o|-O are specified.

documents.document.schema = Show attributes/properties of Document

documents.document.help = Show help on commands for Document

## File Mounts

documents.fmount = File/Document Mount operations
documents.fmount.id = Mount identifier (id | uuid)

documents.fmount.ls = List File/Folder Mounts
documents.fmount.ls.args = $global.ls.args
documents.fmount.ls.args.q = $global.ls.args.q
documents.fmount.ls.options = q,props++,$global.ls.options
documents.fmount.ls.options.q = $global.options.q
documents.fmount.ls.options.props = any property of MountFilter (fmount schema -f)
documents.fmount.ls.options.o = $global.options.o
documents.fmount.ls.options.O = $global.options.O

documents.fmount.get = Get Details of Mount
documents.fmount.get.options = props++,$global.get.options
documents.fmount.get.args = fmountId
documents.fmount.get.args.fmountId = $documents.fmount.id
documents.fmount.get.options = props++,$global.get.options
documents.fmount.get.options.props = any property of MountOptions (fmount schema -g)
documents.fmount.get.options.o = $global.options.o
documents.fmount.get.options.O = $global.options.O

documents.fmount.create = Create Mount
documents.fmount.create.args = name
documents.fmount.create.args.name = $documents.fmount.name
documents.fmount.create.options = props++,$global.create.options
documents.fmount.create.options.props = any property of Mount (fmount schema)
documents.fmount.create.options.o = $global.options.o
documents.fmount.create.options.O = $global.options.O
documents.fmount.create.descr=\
Create Mount with given name.\n\
Get/Show Mount after create, if output options -o|-O are specified.

documents.fmount.update = Update Mount
documents.fmount.update.args = paymentId
documents.fmount.update.args.paymentId = $documents.fmount.id
documents.fmount.update.options = $documents.fmount.create.options
documents.fmount.update.options.props = $documents.fmount.create.options.props
documents.fmount.update.options.o = $global.options.o
documents.fmount.update.options.O = $global.options.O
documents.fmount.update.descr=\
Update Mount with specified id.\n\
Get/Show Mount after update, if output options -o|-O are specified.

documents.fmount.delete = Delete Mount
documents.fmount.delete.args = mountId
documents.fmount.delete.args.mountId = $documents.fmount.id
documents.fmount.delete.options = $general.delete.options
documents.fmount.delete.options.o = $global.options.o
documents.fmount.delete.options.O = $global.options.O
documents.fmount.delete.descr = \
Delete Mount with specified id.\n\
List Mounts after delete, if output options -o|-O are specified.

documents.fmount.schema = Show attributes/properties of Mount
documents.fmount.help = Show help on commands for Mount

#################
# Payments Gateway

payments = Payment Gateway operations

## Account

payments.account = Payment Account Operations
payments.account.id = Account identifier (id | uuid)

payments.account.ls = List Payment Accounts
payments.account.ls.args = $global.ls.args
payments.account.ls.args.q = $global.ls.args.q
payments.account.ls.options = q,props++,$global.ls.options
payments.account.ls.options.q = $global.options.q
payments.account.ls.options.props = any property of AccountFilter (account schema -f)
payments.account.ls.options.o = $global.options.o
payments.account.ls.options.O = $global.options.O

payments.account.get = Get Details of Account
payments.account.get.options = props++,$global.get.options
payments.account.get.args = accountId
payments.account.get.args.accountId = $payments.account.id
payments.account.get.options = props++,$global.get.options
payments.account.get.options.props = any property of AccountOptions (account schema -g)
payments.account.get.options.o = $global.options.o
payments.account.get.options.O = $global.options.O

payments.account.create = Create Payments Account
payments.account.create.args = name
payments.account.create.args.name = $payments.account.name
payments.account.create.options = props++,$global.create.options
payments.account.create.options.props = any property of Account (payment schema)
payments.account.create.options.o = $global.options.o
payments.account.create.options.O = $global.options.O
payments.account.create.descr=\
Create Account with given name.\n\
Get/Show Account after create, if output options -o|-O are specified.

payments.account.update = Update Payments Account
payments.account.update.args = accountId
payments.account.update.args.accountId = $payments.account.id
payments.account.update.options = $payments.account.create.options
payments.account.update.options.props = $payments.account.create.options.props
payments.account.update.options.o = $global.options.o
payments.account.update.options.O = $global.options.O
payments.account.update.descr=\
Update Account with specified id.\n\
Get/Show Account after update, if output options -o|-O are specified.

payments.account.delete = Delete Payments Account
payments.account.delete.args = paymentId
payments.account.delete.args.paymentId = $payments.account.id
payments.account.delete.options = $general.delete.options
payments.account.delete.options.o = $global.options.o
payments.account.delete.options.O = $global.options.O
payments.account.delete.descr = \
Delete Account with specified id.\n\
List Accounts after delete, if output options -o|-O are specified.

payments.account.schema = Show attributes/properties of Account
payments.account.help = Show help on commands for Account

## Payment

payments.payment = Payment Operations
payments.payment.id = Payment identifier (id | uuid)

payments.payment.ls = List Payments
payments.payment.ls.args = $global.ls.args
payments.payment.ls.args.q = $global.ls.args.q
payments.payment.ls.options = q,props++,$global.ls.options
payments.payment.ls.options.q = $global.options.q
payments.payment.ls.options.props = any property of PaymentFilter (payment schema -f)
payments.payment.ls.options.o = $global.options.o
payments.payment.ls.options.O = $global.options.O

payments.payment.get = Get Details of Payment
payments.payment.get.options = props++,$global.get.options
payments.payment.get.args = paymentId
payments.payment.get.args.paymentId = $payments.payment.id
payments.payment.get.options = props++,$global.get.options
payments.payment.get.options.props = any property of PaymentOptions (payment schema -g)
payments.payment.get.options.o = $global.options.o
payments.payment.get.options.O = $global.options.O

payments.payment.create = Submit Payment
payments.payment.create.args = name
payments.payment.create.args.name = $payments.payment.name
payments.payment.create.options = props++,$global.create.options
payments.payment.create.options.props = any property of Payment (payment schema)
payments.payment.create.options.o = $global.options.o
payments.payment.create.options.O = $global.options.O
payments.payment.create.descr=\
Create Payment with given name.\n\
Get/Show Payment after create, if output options -o|-O are specified.

payments.payment.update = Update Payment
payments.payment.update.args = paymentId
payments.payment.update.args.paymentId = $payments.payment.id
payments.payment.update.options = $payments.payment.create.options
payments.payment.update.options.props = $payments.payment.create.options.props
payments.payment.update.options.o = $global.options.o
payments.payment.update.options.O = $global.options.O
payments.payment.update.descr=\
Update Payment with specified id.\n\
Get/Show Payment after update, if output options -o|-O are specified.

payments.payment.delete = Delete Payment
payments.payment.delete.args = paymentId
payments.payment.delete.args.paymentId = $payments.payment.id
payments.payment.delete.options = $general.delete.options
payments.payment.delete.options.o = $global.options.o
payments.payment.delete.options.O = $global.options.O
payments.payment.delete.descr = \
Delete Payment with specified id.\n\
List Payments after delete, if output options -o|-O are specified.

payments.payment.schema = Show attributes/properties of Payment
payments.payment.help = Show help on commands for Payment

## Tax

payments.tax = Tax Operations
payments.tax.id = Tax identifier (id | uuid)

payments.tax.ls = List Taxes
payments.tax.ls.args = $global.ls.args
payments.tax.ls.args.q = $global.ls.args.q
payments.tax.ls.options = q,props++,$global.ls.options
payments.tax.ls.options.q = $global.options.q
payments.tax.ls.options.props = any property of TaxFilter (tax schema -f)
payments.tax.ls.options.o = $global.options.o
payments.tax.ls.options.O = $global.options.O

payments.tax.get = Get Details of Tax
payments.tax.get.options = props++,$global.get.options
payments.tax.get.args = taxId
payments.tax.get.args.taxId = $payments.tax.id
payments.tax.get.options = props++,$global.get.options
payments.tax.get.options.props = any property of PaymentOptions (tax schema -g)
payments.tax.get.options.o = $global.options.o
payments.tax.get.options.O = $global.options.O

payments.tax.create = Create Tax
payments.tax.create.args = name
payments.tax.create.args.name = $payments.tax.name
payments.tax.create.options = props++,$global.create.options
payments.tax.create.options.props = any property of Tax (tax schema)
payments.tax.create.options.o = $global.options.o
payments.tax.create.options.O = $global.options.O
payments.tax.create.descr=\
Create Tax with given name.\n\
Get/Show Tax after create, if output options -o|-O are specified.

payments.tax.update = Update Tax
payments.tax.update.args = taxId
payments.tax.update.args.taxId = $payments.tax.id
payments.tax.update.options = $payments.tax.create.options
payments.tax.update.options.props = $payments.tax.create.options.props
payments.tax.update.options.o = $global.options.o
payments.tax.update.options.O = $global.options.O
payments.tax.update.descr=\
Update Tax with specified id.\n\
Get/Show Tax after update, if output options -o|-O are specified.

payments.tax.delete = Delete Tax
payments.tax.delete.args = taxId
payments.tax.delete.args.taxId = $payments.tax.id
payments.tax.delete.options = $general.delete.options
payments.tax.delete.options.o = $global.options.o
payments.tax.delete.options.O = $global.options.O
payments.tax.delete.descr = \
Delete Tax with specified id.\n\
List Taxes after delete, if output options -o|-O are specified.

payments.tax.schema = Show attributes/properties of Tax
payments.tax.help = Show help on commands for Tax
